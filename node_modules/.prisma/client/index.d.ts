
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/binary.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Categoria
 * 
 */
export type Categoria = $Result.DefaultSelection<Prisma.$CategoriaPayload>
/**
 * Model Produtos
 * 
 */
export type Produtos = $Result.DefaultSelection<Prisma.$ProdutosPayload>
/**
 * Model Imagens
 * 
 */
export type Imagens = $Result.DefaultSelection<Prisma.$ImagensPayload>
/**
 * Model OpcoesProdutos
 * 
 */
export type OpcoesProdutos = $Result.DefaultSelection<Prisma.$OpcoesProdutosPayload>
/**
 * Model ProdutoCategoria
 * 
 */
export type ProdutoCategoria = $Result.DefaultSelection<Prisma.$ProdutoCategoriaPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Shape: {
  SQUARE: 'SQUARE',
  CIRCLE: 'CIRCLE'
};

export type Shape = (typeof Shape)[keyof typeof Shape]


export const Type: {
  TEXT: 'TEXT',
  COLOR: 'COLOR'
};

export type Type = (typeof Type)[keyof typeof Type]

}

export type Shape = $Enums.Shape

export const Shape: typeof $Enums.Shape

export type Type = $Enums.Type

export const Type: typeof $Enums.Type

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends (U | 'beforeExit')>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : V extends 'beforeExit' ? () => $Utils.JsPromise<void> : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.categoria`: Exposes CRUD operations for the **Categoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categorias
    * const categorias = await prisma.categoria.findMany()
    * ```
    */
  get categoria(): Prisma.CategoriaDelegate<ExtArgs>;

  /**
   * `prisma.produtos`: Exposes CRUD operations for the **Produtos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Produtos
    * const produtos = await prisma.produtos.findMany()
    * ```
    */
  get produtos(): Prisma.ProdutosDelegate<ExtArgs>;

  /**
   * `prisma.imagens`: Exposes CRUD operations for the **Imagens** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Imagens
    * const imagens = await prisma.imagens.findMany()
    * ```
    */
  get imagens(): Prisma.ImagensDelegate<ExtArgs>;

  /**
   * `prisma.opcoesProdutos`: Exposes CRUD operations for the **OpcoesProdutos** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more OpcoesProdutos
    * const opcoesProdutos = await prisma.opcoesProdutos.findMany()
    * ```
    */
  get opcoesProdutos(): Prisma.OpcoesProdutosDelegate<ExtArgs>;

  /**
   * `prisma.produtoCategoria`: Exposes CRUD operations for the **ProdutoCategoria** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more ProdutoCategorias
    * const produtoCategorias = await prisma.produtoCategoria.findMany()
    * ```
    */
  get produtoCategoria(): Prisma.ProdutoCategoriaDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.22.0
   * Query Engine version: 605197351a3c8bdd595af2d2a9bc3025bca48ea2
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Categoria: 'Categoria',
    Produtos: 'Produtos',
    Imagens: 'Imagens',
    OpcoesProdutos: 'OpcoesProdutos',
    ProdutoCategoria: 'ProdutoCategoria'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs, clientOptions: PrismaClientOptions }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], this['params']['clientOptions']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, ClientOptions = {}> = {
    meta: {
      modelProps: "user" | "categoria" | "produtos" | "imagens" | "opcoesProdutos" | "produtoCategoria"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Categoria: {
        payload: Prisma.$CategoriaPayload<ExtArgs>
        fields: Prisma.CategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findFirst: {
            args: Prisma.CategoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          findMany: {
            args: Prisma.CategoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>[]
          }
          create: {
            args: Prisma.CategoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          createMany: {
            args: Prisma.CategoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.CategoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          update: {
            args: Prisma.CategoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          deleteMany: {
            args: Prisma.CategoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.CategoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.CategoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$CategoriaPayload>
          }
          aggregate: {
            args: Prisma.CategoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateCategoria>
          }
          groupBy: {
            args: Prisma.CategoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<CategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoriaCountArgs<ExtArgs>
            result: $Utils.Optional<CategoriaCountAggregateOutputType> | number
          }
        }
      }
      Produtos: {
        payload: Prisma.$ProdutosPayload<ExtArgs>
        fields: Prisma.ProdutosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          findFirst: {
            args: Prisma.ProdutosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          findMany: {
            args: Prisma.ProdutosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>[]
          }
          create: {
            args: Prisma.ProdutosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          createMany: {
            args: Prisma.ProdutosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdutosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          update: {
            args: Prisma.ProdutosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          deleteMany: {
            args: Prisma.ProdutosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutosPayload>
          }
          aggregate: {
            args: Prisma.ProdutosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdutos>
          }
          groupBy: {
            args: Prisma.ProdutosGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutosGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutosCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutosCountAggregateOutputType> | number
          }
        }
      }
      Imagens: {
        payload: Prisma.$ImagensPayload<ExtArgs>
        fields: Prisma.ImagensFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImagensFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagensPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImagensFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagensPayload>
          }
          findFirst: {
            args: Prisma.ImagensFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagensPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImagensFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagensPayload>
          }
          findMany: {
            args: Prisma.ImagensFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagensPayload>[]
          }
          create: {
            args: Prisma.ImagensCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagensPayload>
          }
          createMany: {
            args: Prisma.ImagensCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ImagensDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagensPayload>
          }
          update: {
            args: Prisma.ImagensUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagensPayload>
          }
          deleteMany: {
            args: Prisma.ImagensDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ImagensUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ImagensUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ImagensPayload>
          }
          aggregate: {
            args: Prisma.ImagensAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateImagens>
          }
          groupBy: {
            args: Prisma.ImagensGroupByArgs<ExtArgs>
            result: $Utils.Optional<ImagensGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImagensCountArgs<ExtArgs>
            result: $Utils.Optional<ImagensCountAggregateOutputType> | number
          }
        }
      }
      OpcoesProdutos: {
        payload: Prisma.$OpcoesProdutosPayload<ExtArgs>
        fields: Prisma.OpcoesProdutosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.OpcoesProdutosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpcoesProdutosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.OpcoesProdutosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpcoesProdutosPayload>
          }
          findFirst: {
            args: Prisma.OpcoesProdutosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpcoesProdutosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.OpcoesProdutosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpcoesProdutosPayload>
          }
          findMany: {
            args: Prisma.OpcoesProdutosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpcoesProdutosPayload>[]
          }
          create: {
            args: Prisma.OpcoesProdutosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpcoesProdutosPayload>
          }
          createMany: {
            args: Prisma.OpcoesProdutosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.OpcoesProdutosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpcoesProdutosPayload>
          }
          update: {
            args: Prisma.OpcoesProdutosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpcoesProdutosPayload>
          }
          deleteMany: {
            args: Prisma.OpcoesProdutosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.OpcoesProdutosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.OpcoesProdutosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$OpcoesProdutosPayload>
          }
          aggregate: {
            args: Prisma.OpcoesProdutosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateOpcoesProdutos>
          }
          groupBy: {
            args: Prisma.OpcoesProdutosGroupByArgs<ExtArgs>
            result: $Utils.Optional<OpcoesProdutosGroupByOutputType>[]
          }
          count: {
            args: Prisma.OpcoesProdutosCountArgs<ExtArgs>
            result: $Utils.Optional<OpcoesProdutosCountAggregateOutputType> | number
          }
        }
      }
      ProdutoCategoria: {
        payload: Prisma.$ProdutoCategoriaPayload<ExtArgs>
        fields: Prisma.ProdutoCategoriaFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ProdutoCategoriaFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ProdutoCategoriaFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          findFirst: {
            args: Prisma.ProdutoCategoriaFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ProdutoCategoriaFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          findMany: {
            args: Prisma.ProdutoCategoriaFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>[]
          }
          create: {
            args: Prisma.ProdutoCategoriaCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          createMany: {
            args: Prisma.ProdutoCategoriaCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          delete: {
            args: Prisma.ProdutoCategoriaDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          update: {
            args: Prisma.ProdutoCategoriaUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          deleteMany: {
            args: Prisma.ProdutoCategoriaDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.ProdutoCategoriaUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          upsert: {
            args: Prisma.ProdutoCategoriaUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$ProdutoCategoriaPayload>
          }
          aggregate: {
            args: Prisma.ProdutoCategoriaAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateProdutoCategoria>
          }
          groupBy: {
            args: Prisma.ProdutoCategoriaGroupByArgs<ExtArgs>
            result: $Utils.Optional<ProdutoCategoriaGroupByOutputType>[]
          }
          count: {
            args: Prisma.ProdutoCategoriaCountArgs<ExtArgs>
            result: $Utils.Optional<ProdutoCategoriaCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }


  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    categoria: number
    produtos: number
    imagens: number
    opcoesProdutos: number
    produtoCategoria: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | UserCountOutputTypeCountCategoriaArgs
    produtos?: boolean | UserCountOutputTypeCountProdutosArgs
    imagens?: boolean | UserCountOutputTypeCountImagensArgs
    opcoesProdutos?: boolean | UserCountOutputTypeCountOpcoesProdutosArgs
    produtoCategoria?: boolean | UserCountOutputTypeCountProdutoCategoriaArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutosWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountImagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImagensWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountOpcoesProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpcoesProdutosWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountProdutoCategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoCategoriaWhereInput
  }


  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    username: string | null
    email: string | null
    password: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    username: number
    email: number
    password: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    username?: true
    email?: true
    password?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    username: string
    email: string
    password: string
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
    categoria?: boolean | User$categoriaArgs<ExtArgs>
    produtos?: boolean | User$produtosArgs<ExtArgs>
    imagens?: boolean | User$imagensArgs<ExtArgs>
    opcoesProdutos?: boolean | User$opcoesProdutosArgs<ExtArgs>
    produtoCategoria?: boolean | User$produtoCategoriaArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>


  export type UserSelectScalar = {
    id?: boolean
    username?: boolean
    email?: boolean
    password?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    categoria?: boolean | User$categoriaArgs<ExtArgs>
    produtos?: boolean | User$produtosArgs<ExtArgs>
    imagens?: boolean | User$imagensArgs<ExtArgs>
    opcoesProdutos?: boolean | User$opcoesProdutosArgs<ExtArgs>
    produtoCategoria?: boolean | User$produtoCategoriaArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }

  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      categoria: Prisma.$CategoriaPayload<ExtArgs>[]
      produtos: Prisma.$ProdutosPayload<ExtArgs>[]
      imagens: Prisma.$ImagensPayload<ExtArgs>[]
      opcoesProdutos: Prisma.$OpcoesProdutosPayload<ExtArgs>[]
      produtoCategoria: Prisma.$ProdutoCategoriaPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      username: string
      email: string
      password: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }

  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends UserFindUniqueArgs>(args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs>(args: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends UserFindFirstArgs>(args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs>(args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends UserFindManyArgs>(args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
     */
    create<T extends UserCreateArgs>(args: SelectSubset<T, UserCreateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Users.
     * @param {UserCreateManyArgs} args - Arguments to create many Users.
     * @example
     * // Create many Users
     * const user = await prisma.user.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends UserCreateManyArgs>(args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
     */
    delete<T extends UserDeleteArgs>(args: SelectSubset<T, UserDeleteArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends UserUpdateArgs>(args: SelectSubset<T, UserUpdateArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends UserDeleteManyArgs>(args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends UserUpdateManyArgs>(args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
     */
    upsert<T extends UserUpsertArgs>(args: SelectSubset<T, UserUpsertArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    categoria<T extends User$categoriaArgs<ExtArgs> = {}>(args?: Subset<T, User$categoriaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findMany"> | Null>
    produtos<T extends User$produtosArgs<ExtArgs> = {}>(args?: Subset<T, User$produtosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findMany"> | Null>
    imagens<T extends User$imagensArgs<ExtArgs> = {}>(args?: Subset<T, User$imagensArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagensPayload<ExtArgs>, T, "findMany"> | Null>
    opcoesProdutos<T extends User$opcoesProdutosArgs<ExtArgs> = {}>(args?: Subset<T, User$opcoesProdutosArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpcoesProdutosPayload<ExtArgs>, T, "findMany"> | Null>
    produtoCategoria<T extends User$produtoCategoriaArgs<ExtArgs> = {}>(args?: Subset<T, User$produtoCategoriaArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findMany"> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly username: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.categoria
   */
  export type User$categoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    where?: CategoriaWhereInput
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    cursor?: CategoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * User.produtos
   */
  export type User$produtosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    where?: ProdutosWhereInput
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    cursor?: ProdutosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutosScalarFieldEnum | ProdutosScalarFieldEnum[]
  }

  /**
   * User.imagens
   */
  export type User$imagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
    where?: ImagensWhereInput
    orderBy?: ImagensOrderByWithRelationInput | ImagensOrderByWithRelationInput[]
    cursor?: ImagensWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImagensScalarFieldEnum | ImagensScalarFieldEnum[]
  }

  /**
   * User.opcoesProdutos
   */
  export type User$opcoesProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
    where?: OpcoesProdutosWhereInput
    orderBy?: OpcoesProdutosOrderByWithRelationInput | OpcoesProdutosOrderByWithRelationInput[]
    cursor?: OpcoesProdutosWhereUniqueInput
    take?: number
    skip?: number
    distinct?: OpcoesProdutosScalarFieldEnum | OpcoesProdutosScalarFieldEnum[]
  }

  /**
   * User.produtoCategoria
   */
  export type User$produtoCategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    where?: ProdutoCategoriaWhereInput
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    cursor?: ProdutoCategoriaWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ProdutoCategoriaScalarFieldEnum | ProdutoCategoriaScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model Categoria
   */

  export type AggregateCategoria = {
    _count: CategoriaCountAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  export type CategoriaMinAggregateOutputType = {
    id: string | null
    nome: string | null
    slug: string | null
    use_in_menu: boolean | null
    userId: string | null
  }

  export type CategoriaMaxAggregateOutputType = {
    id: string | null
    nome: string | null
    slug: string | null
    use_in_menu: boolean | null
    userId: string | null
  }

  export type CategoriaCountAggregateOutputType = {
    id: number
    nome: number
    slug: number
    use_in_menu: number
    userId: number
    _all: number
  }


  export type CategoriaMinAggregateInputType = {
    id?: true
    nome?: true
    slug?: true
    use_in_menu?: true
    userId?: true
  }

  export type CategoriaMaxAggregateInputType = {
    id?: true
    nome?: true
    slug?: true
    use_in_menu?: true
    userId?: true
  }

  export type CategoriaCountAggregateInputType = {
    id?: true
    nome?: true
    slug?: true
    use_in_menu?: true
    userId?: true
    _all?: true
  }

  export type CategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categoria to aggregate.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categorias
    **/
    _count?: true | CategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoriaMaxAggregateInputType
  }

  export type GetCategoriaAggregateType<T extends CategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategoria[P]>
      : GetScalarType<T[P], AggregateCategoria[P]>
  }




  export type CategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoriaWhereInput
    orderBy?: CategoriaOrderByWithAggregationInput | CategoriaOrderByWithAggregationInput[]
    by: CategoriaScalarFieldEnum[] | CategoriaScalarFieldEnum
    having?: CategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoriaCountAggregateInputType | true
    _min?: CategoriaMinAggregateInputType
    _max?: CategoriaMaxAggregateInputType
  }

  export type CategoriaGroupByOutputType = {
    id: string
    nome: string
    slug: string
    use_in_menu: boolean
    userId: string
    _count: CategoriaCountAggregateOutputType | null
    _min: CategoriaMinAggregateOutputType | null
    _max: CategoriaMaxAggregateOutputType | null
  }

  type GetCategoriaGroupByPayload<T extends CategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], CategoriaGroupByOutputType[P]>
        }
      >
    >


  export type CategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    nome?: boolean
    slug?: boolean
    use_in_menu?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["categoria"]>


  export type CategoriaSelectScalar = {
    id?: boolean
    nome?: boolean
    slug?: boolean
    use_in_menu?: boolean
    userId?: boolean
  }

  export type CategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $CategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Categoria"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      nome: string
      slug: string
      use_in_menu: boolean
      userId: string
    }, ExtArgs["result"]["categoria"]>
    composites: {}
  }

  type CategoriaGetPayload<S extends boolean | null | undefined | CategoriaDefaultArgs> = $Result.GetResult<Prisma.$CategoriaPayload, S>

  type CategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoriaCountAggregateInputType | true
    }

  export interface CategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Categoria'], meta: { name: 'Categoria' } }
    /**
     * Find zero or one Categoria that matches the filter.
     * @param {CategoriaFindUniqueArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends CategoriaFindUniqueArgs>(args: SelectSubset<T, CategoriaFindUniqueArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Categoria that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {CategoriaFindUniqueOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends CategoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, CategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Categoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends CategoriaFindFirstArgs>(args?: SelectSubset<T, CategoriaFindFirstArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Categoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindFirstOrThrowArgs} args - Arguments to find a Categoria
     * @example
     * // Get one Categoria
     * const categoria = await prisma.categoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends CategoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, CategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Categorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categorias
     * const categorias = await prisma.categoria.findMany()
     * 
     * // Get first 10 Categorias
     * const categorias = await prisma.categoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoriaWithIdOnly = await prisma.categoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends CategoriaFindManyArgs>(args?: SelectSubset<T, CategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Categoria.
     * @param {CategoriaCreateArgs} args - Arguments to create a Categoria.
     * @example
     * // Create one Categoria
     * const Categoria = await prisma.categoria.create({
     *   data: {
     *     // ... data to create a Categoria
     *   }
     * })
     * 
     */
    create<T extends CategoriaCreateArgs>(args: SelectSubset<T, CategoriaCreateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Categorias.
     * @param {CategoriaCreateManyArgs} args - Arguments to create many Categorias.
     * @example
     * // Create many Categorias
     * const categoria = await prisma.categoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends CategoriaCreateManyArgs>(args?: SelectSubset<T, CategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Categoria.
     * @param {CategoriaDeleteArgs} args - Arguments to delete one Categoria.
     * @example
     * // Delete one Categoria
     * const Categoria = await prisma.categoria.delete({
     *   where: {
     *     // ... filter to delete one Categoria
     *   }
     * })
     * 
     */
    delete<T extends CategoriaDeleteArgs>(args: SelectSubset<T, CategoriaDeleteArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Categoria.
     * @param {CategoriaUpdateArgs} args - Arguments to update one Categoria.
     * @example
     * // Update one Categoria
     * const categoria = await prisma.categoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends CategoriaUpdateArgs>(args: SelectSubset<T, CategoriaUpdateArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Categorias.
     * @param {CategoriaDeleteManyArgs} args - Arguments to filter Categorias to delete.
     * @example
     * // Delete a few Categorias
     * const { count } = await prisma.categoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends CategoriaDeleteManyArgs>(args?: SelectSubset<T, CategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categorias
     * const categoria = await prisma.categoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends CategoriaUpdateManyArgs>(args: SelectSubset<T, CategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Categoria.
     * @param {CategoriaUpsertArgs} args - Arguments to update or create a Categoria.
     * @example
     * // Update or create a Categoria
     * const categoria = await prisma.categoria.upsert({
     *   create: {
     *     // ... data to create a Categoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Categoria we want to update
     *   }
     * })
     */
    upsert<T extends CategoriaUpsertArgs>(args: SelectSubset<T, CategoriaUpsertArgs<ExtArgs>>): Prisma__CategoriaClient<$Result.GetResult<Prisma.$CategoriaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Categorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaCountArgs} args - Arguments to filter Categorias to count.
     * @example
     * // Count the number of Categorias
     * const count = await prisma.categoria.count({
     *   where: {
     *     // ... the filter for the Categorias we want to count
     *   }
     * })
    **/
    count<T extends CategoriaCountArgs>(
      args?: Subset<T, CategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoriaAggregateArgs>(args: Subset<T, CategoriaAggregateArgs>): Prisma.PrismaPromise<GetCategoriaAggregateType<T>>

    /**
     * Group by Categoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoriaGroupByArgs['orderBy'] }
        : { orderBy?: CategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Categoria model
   */
  readonly fields: CategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Categoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Categoria model
   */ 
  interface CategoriaFieldRefs {
    readonly id: FieldRef<"Categoria", 'String'>
    readonly nome: FieldRef<"Categoria", 'String'>
    readonly slug: FieldRef<"Categoria", 'String'>
    readonly use_in_menu: FieldRef<"Categoria", 'Boolean'>
    readonly userId: FieldRef<"Categoria", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Categoria findUnique
   */
  export type CategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findUniqueOrThrow
   */
  export type CategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria findFirst
   */
  export type CategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findFirstOrThrow
   */
  export type CategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categoria to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categorias.
     */
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria findMany
   */
  export type CategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter, which Categorias to fetch.
     */
    where?: CategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categorias to fetch.
     */
    orderBy?: CategoriaOrderByWithRelationInput | CategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categorias.
     */
    cursor?: CategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categorias.
     */
    skip?: number
    distinct?: CategoriaScalarFieldEnum | CategoriaScalarFieldEnum[]
  }

  /**
   * Categoria create
   */
  export type CategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a Categoria.
     */
    data: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
  }

  /**
   * Categoria createMany
   */
  export type CategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categorias.
     */
    data: CategoriaCreateManyInput | CategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Categoria update
   */
  export type CategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a Categoria.
     */
    data: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
    /**
     * Choose, which Categoria to update.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria updateMany
   */
  export type CategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categorias.
     */
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyInput>
    /**
     * Filter which Categorias to update
     */
    where?: CategoriaWhereInput
  }

  /**
   * Categoria upsert
   */
  export type CategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the Categoria to update in case it exists.
     */
    where: CategoriaWhereUniqueInput
    /**
     * In case the Categoria found by the `where` argument doesn't exist, create a new Categoria with this data.
     */
    create: XOR<CategoriaCreateInput, CategoriaUncheckedCreateInput>
    /**
     * In case the Categoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoriaUpdateInput, CategoriaUncheckedUpdateInput>
  }

  /**
   * Categoria delete
   */
  export type CategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
    /**
     * Filter which Categoria to delete.
     */
    where: CategoriaWhereUniqueInput
  }

  /**
   * Categoria deleteMany
   */
  export type CategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categorias to delete
     */
    where?: CategoriaWhereInput
  }

  /**
   * Categoria without action
   */
  export type CategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Categoria
     */
    select?: CategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoriaInclude<ExtArgs> | null
  }


  /**
   * Model Produtos
   */

  export type AggregateProdutos = {
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  export type ProdutosAvgAggregateOutputType = {
    stock: number | null
    price: number | null
    price_with_discount: number | null
  }

  export type ProdutosSumAggregateOutputType = {
    stock: number | null
    price: number | null
    price_with_discount: number | null
  }

  export type ProdutosMinAggregateOutputType = {
    id: string | null
    enabled: boolean | null
    name: string | null
    slug: string | null
    use_in_menu: boolean | null
    stock: number | null
    description: string | null
    price: number | null
    price_with_discount: number | null
    userId: string | null
  }

  export type ProdutosMaxAggregateOutputType = {
    id: string | null
    enabled: boolean | null
    name: string | null
    slug: string | null
    use_in_menu: boolean | null
    stock: number | null
    description: string | null
    price: number | null
    price_with_discount: number | null
    userId: string | null
  }

  export type ProdutosCountAggregateOutputType = {
    id: number
    enabled: number
    name: number
    slug: number
    use_in_menu: number
    stock: number
    description: number
    price: number
    price_with_discount: number
    userId: number
    _all: number
  }


  export type ProdutosAvgAggregateInputType = {
    stock?: true
    price?: true
    price_with_discount?: true
  }

  export type ProdutosSumAggregateInputType = {
    stock?: true
    price?: true
    price_with_discount?: true
  }

  export type ProdutosMinAggregateInputType = {
    id?: true
    enabled?: true
    name?: true
    slug?: true
    use_in_menu?: true
    stock?: true
    description?: true
    price?: true
    price_with_discount?: true
    userId?: true
  }

  export type ProdutosMaxAggregateInputType = {
    id?: true
    enabled?: true
    name?: true
    slug?: true
    use_in_menu?: true
    stock?: true
    description?: true
    price?: true
    price_with_discount?: true
    userId?: true
  }

  export type ProdutosCountAggregateInputType = {
    id?: true
    enabled?: true
    name?: true
    slug?: true
    use_in_menu?: true
    stock?: true
    description?: true
    price?: true
    price_with_discount?: true
    userId?: true
    _all?: true
  }

  export type ProdutosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to aggregate.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Produtos
    **/
    _count?: true | ProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutosMaxAggregateInputType
  }

  export type GetProdutosAggregateType<T extends ProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutos[P]>
      : GetScalarType<T[P], AggregateProdutos[P]>
  }




  export type ProdutosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutosWhereInput
    orderBy?: ProdutosOrderByWithAggregationInput | ProdutosOrderByWithAggregationInput[]
    by: ProdutosScalarFieldEnum[] | ProdutosScalarFieldEnum
    having?: ProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutosCountAggregateInputType | true
    _avg?: ProdutosAvgAggregateInputType
    _sum?: ProdutosSumAggregateInputType
    _min?: ProdutosMinAggregateInputType
    _max?: ProdutosMaxAggregateInputType
  }

  export type ProdutosGroupByOutputType = {
    id: string
    enabled: boolean
    name: string
    slug: string
    use_in_menu: boolean
    stock: number
    description: string
    price: number
    price_with_discount: number
    userId: string
    _count: ProdutosCountAggregateOutputType | null
    _avg: ProdutosAvgAggregateOutputType | null
    _sum: ProdutosSumAggregateOutputType | null
    _min: ProdutosMinAggregateOutputType | null
    _max: ProdutosMaxAggregateOutputType | null
  }

  type GetProdutosGroupByPayload<T extends ProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutosGroupByOutputType[P]>
        }
      >
    >


  export type ProdutosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    enabled?: boolean
    name?: boolean
    slug?: boolean
    use_in_menu?: boolean
    stock?: boolean
    description?: boolean
    price?: boolean
    price_with_discount?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produtos"]>


  export type ProdutosSelectScalar = {
    id?: boolean
    enabled?: boolean
    name?: boolean
    slug?: boolean
    use_in_menu?: boolean
    stock?: boolean
    description?: boolean
    price?: boolean
    price_with_discount?: boolean
    userId?: boolean
  }

  export type ProdutosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProdutosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Produtos"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      enabled: boolean
      name: string
      slug: string
      use_in_menu: boolean
      stock: number
      description: string
      price: number
      price_with_discount: number
      userId: string
    }, ExtArgs["result"]["produtos"]>
    composites: {}
  }

  type ProdutosGetPayload<S extends boolean | null | undefined | ProdutosDefaultArgs> = $Result.GetResult<Prisma.$ProdutosPayload, S>

  type ProdutosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutosCountAggregateInputType | true
    }

  export interface ProdutosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Produtos'], meta: { name: 'Produtos' } }
    /**
     * Find zero or one Produtos that matches the filter.
     * @param {ProdutosFindUniqueArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutosFindUniqueArgs>(args: SelectSubset<T, ProdutosFindUniqueArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Produtos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProdutosFindUniqueOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutosFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindFirstArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutosFindFirstArgs>(args?: SelectSubset<T, ProdutosFindFirstArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Produtos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindFirstOrThrowArgs} args - Arguments to find a Produtos
     * @example
     * // Get one Produtos
     * const produtos = await prisma.produtos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutosFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutosFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Produtos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Produtos
     * const produtos = await prisma.produtos.findMany()
     * 
     * // Get first 10 Produtos
     * const produtos = await prisma.produtos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtosWithIdOnly = await prisma.produtos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutosFindManyArgs>(args?: SelectSubset<T, ProdutosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Produtos.
     * @param {ProdutosCreateArgs} args - Arguments to create a Produtos.
     * @example
     * // Create one Produtos
     * const Produtos = await prisma.produtos.create({
     *   data: {
     *     // ... data to create a Produtos
     *   }
     * })
     * 
     */
    create<T extends ProdutosCreateArgs>(args: SelectSubset<T, ProdutosCreateArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Produtos.
     * @param {ProdutosCreateManyArgs} args - Arguments to create many Produtos.
     * @example
     * // Create many Produtos
     * const produtos = await prisma.produtos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutosCreateManyArgs>(args?: SelectSubset<T, ProdutosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Produtos.
     * @param {ProdutosDeleteArgs} args - Arguments to delete one Produtos.
     * @example
     * // Delete one Produtos
     * const Produtos = await prisma.produtos.delete({
     *   where: {
     *     // ... filter to delete one Produtos
     *   }
     * })
     * 
     */
    delete<T extends ProdutosDeleteArgs>(args: SelectSubset<T, ProdutosDeleteArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Produtos.
     * @param {ProdutosUpdateArgs} args - Arguments to update one Produtos.
     * @example
     * // Update one Produtos
     * const produtos = await prisma.produtos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutosUpdateArgs>(args: SelectSubset<T, ProdutosUpdateArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Produtos.
     * @param {ProdutosDeleteManyArgs} args - Arguments to filter Produtos to delete.
     * @example
     * // Delete a few Produtos
     * const { count } = await prisma.produtos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutosDeleteManyArgs>(args?: SelectSubset<T, ProdutosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Produtos
     * const produtos = await prisma.produtos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutosUpdateManyArgs>(args: SelectSubset<T, ProdutosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Produtos.
     * @param {ProdutosUpsertArgs} args - Arguments to update or create a Produtos.
     * @example
     * // Update or create a Produtos
     * const produtos = await prisma.produtos.upsert({
     *   create: {
     *     // ... data to create a Produtos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Produtos we want to update
     *   }
     * })
     */
    upsert<T extends ProdutosUpsertArgs>(args: SelectSubset<T, ProdutosUpsertArgs<ExtArgs>>): Prisma__ProdutosClient<$Result.GetResult<Prisma.$ProdutosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosCountArgs} args - Arguments to filter Produtos to count.
     * @example
     * // Count the number of Produtos
     * const count = await prisma.produtos.count({
     *   where: {
     *     // ... the filter for the Produtos we want to count
     *   }
     * })
    **/
    count<T extends ProdutosCountArgs>(
      args?: Subset<T, ProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutosAggregateArgs>(args: Subset<T, ProdutosAggregateArgs>): Prisma.PrismaPromise<GetProdutosAggregateType<T>>

    /**
     * Group by Produtos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutosGroupByArgs['orderBy'] }
        : { orderBy?: ProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Produtos model
   */
  readonly fields: ProdutosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Produtos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Produtos model
   */ 
  interface ProdutosFieldRefs {
    readonly id: FieldRef<"Produtos", 'String'>
    readonly enabled: FieldRef<"Produtos", 'Boolean'>
    readonly name: FieldRef<"Produtos", 'String'>
    readonly slug: FieldRef<"Produtos", 'String'>
    readonly use_in_menu: FieldRef<"Produtos", 'Boolean'>
    readonly stock: FieldRef<"Produtos", 'Int'>
    readonly description: FieldRef<"Produtos", 'String'>
    readonly price: FieldRef<"Produtos", 'Float'>
    readonly price_with_discount: FieldRef<"Produtos", 'Float'>
    readonly userId: FieldRef<"Produtos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Produtos findUnique
   */
  export type ProdutosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos findUniqueOrThrow
   */
  export type ProdutosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos findFirst
   */
  export type ProdutosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutosScalarFieldEnum | ProdutosScalarFieldEnum[]
  }

  /**
   * Produtos findFirstOrThrow
   */
  export type ProdutosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Produtos.
     */
    distinct?: ProdutosScalarFieldEnum | ProdutosScalarFieldEnum[]
  }

  /**
   * Produtos findMany
   */
  export type ProdutosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter, which Produtos to fetch.
     */
    where?: ProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Produtos to fetch.
     */
    orderBy?: ProdutosOrderByWithRelationInput | ProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Produtos.
     */
    cursor?: ProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Produtos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Produtos.
     */
    skip?: number
    distinct?: ProdutosScalarFieldEnum | ProdutosScalarFieldEnum[]
  }

  /**
   * Produtos create
   */
  export type ProdutosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * The data needed to create a Produtos.
     */
    data: XOR<ProdutosCreateInput, ProdutosUncheckedCreateInput>
  }

  /**
   * Produtos createMany
   */
  export type ProdutosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Produtos.
     */
    data: ProdutosCreateManyInput | ProdutosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Produtos update
   */
  export type ProdutosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * The data needed to update a Produtos.
     */
    data: XOR<ProdutosUpdateInput, ProdutosUncheckedUpdateInput>
    /**
     * Choose, which Produtos to update.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos updateMany
   */
  export type ProdutosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Produtos.
     */
    data: XOR<ProdutosUpdateManyMutationInput, ProdutosUncheckedUpdateManyInput>
    /**
     * Filter which Produtos to update
     */
    where?: ProdutosWhereInput
  }

  /**
   * Produtos upsert
   */
  export type ProdutosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * The filter to search for the Produtos to update in case it exists.
     */
    where: ProdutosWhereUniqueInput
    /**
     * In case the Produtos found by the `where` argument doesn't exist, create a new Produtos with this data.
     */
    create: XOR<ProdutosCreateInput, ProdutosUncheckedCreateInput>
    /**
     * In case the Produtos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutosUpdateInput, ProdutosUncheckedUpdateInput>
  }

  /**
   * Produtos delete
   */
  export type ProdutosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
    /**
     * Filter which Produtos to delete.
     */
    where: ProdutosWhereUniqueInput
  }

  /**
   * Produtos deleteMany
   */
  export type ProdutosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Produtos to delete
     */
    where?: ProdutosWhereInput
  }

  /**
   * Produtos without action
   */
  export type ProdutosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Produtos
     */
    select?: ProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutosInclude<ExtArgs> | null
  }


  /**
   * Model Imagens
   */

  export type AggregateImagens = {
    _count: ImagensCountAggregateOutputType | null
    _avg: ImagensAvgAggregateOutputType | null
    _sum: ImagensSumAggregateOutputType | null
    _min: ImagensMinAggregateOutputType | null
    _max: ImagensMaxAggregateOutputType | null
  }

  export type ImagensAvgAggregateOutputType = {
    product_id: number | null
  }

  export type ImagensSumAggregateOutputType = {
    product_id: number | null
  }

  export type ImagensMinAggregateOutputType = {
    id: string | null
    product_id: number | null
    enabled: boolean | null
    path: string | null
    userId: string | null
  }

  export type ImagensMaxAggregateOutputType = {
    id: string | null
    product_id: number | null
    enabled: boolean | null
    path: string | null
    userId: string | null
  }

  export type ImagensCountAggregateOutputType = {
    id: number
    product_id: number
    enabled: number
    path: number
    userId: number
    _all: number
  }


  export type ImagensAvgAggregateInputType = {
    product_id?: true
  }

  export type ImagensSumAggregateInputType = {
    product_id?: true
  }

  export type ImagensMinAggregateInputType = {
    id?: true
    product_id?: true
    enabled?: true
    path?: true
    userId?: true
  }

  export type ImagensMaxAggregateInputType = {
    id?: true
    product_id?: true
    enabled?: true
    path?: true
    userId?: true
  }

  export type ImagensCountAggregateInputType = {
    id?: true
    product_id?: true
    enabled?: true
    path?: true
    userId?: true
    _all?: true
  }

  export type ImagensAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Imagens to aggregate.
     */
    where?: ImagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imagens to fetch.
     */
    orderBy?: ImagensOrderByWithRelationInput | ImagensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imagens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imagens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Imagens
    **/
    _count?: true | ImagensCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImagensAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImagensSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImagensMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImagensMaxAggregateInputType
  }

  export type GetImagensAggregateType<T extends ImagensAggregateArgs> = {
        [P in keyof T & keyof AggregateImagens]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImagens[P]>
      : GetScalarType<T[P], AggregateImagens[P]>
  }




  export type ImagensGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImagensWhereInput
    orderBy?: ImagensOrderByWithAggregationInput | ImagensOrderByWithAggregationInput[]
    by: ImagensScalarFieldEnum[] | ImagensScalarFieldEnum
    having?: ImagensScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImagensCountAggregateInputType | true
    _avg?: ImagensAvgAggregateInputType
    _sum?: ImagensSumAggregateInputType
    _min?: ImagensMinAggregateInputType
    _max?: ImagensMaxAggregateInputType
  }

  export type ImagensGroupByOutputType = {
    id: string
    product_id: number
    enabled: boolean
    path: string
    userId: string
    _count: ImagensCountAggregateOutputType | null
    _avg: ImagensAvgAggregateOutputType | null
    _sum: ImagensSumAggregateOutputType | null
    _min: ImagensMinAggregateOutputType | null
    _max: ImagensMaxAggregateOutputType | null
  }

  type GetImagensGroupByPayload<T extends ImagensGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImagensGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImagensGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImagensGroupByOutputType[P]>
            : GetScalarType<T[P], ImagensGroupByOutputType[P]>
        }
      >
    >


  export type ImagensSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    enabled?: boolean
    path?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["imagens"]>


  export type ImagensSelectScalar = {
    id?: boolean
    product_id?: boolean
    enabled?: boolean
    path?: boolean
    userId?: boolean
  }

  export type ImagensInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ImagensPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Imagens"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      product_id: number
      enabled: boolean
      path: string
      userId: string
    }, ExtArgs["result"]["imagens"]>
    composites: {}
  }

  type ImagensGetPayload<S extends boolean | null | undefined | ImagensDefaultArgs> = $Result.GetResult<Prisma.$ImagensPayload, S>

  type ImagensCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ImagensFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImagensCountAggregateInputType | true
    }

  export interface ImagensDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Imagens'], meta: { name: 'Imagens' } }
    /**
     * Find zero or one Imagens that matches the filter.
     * @param {ImagensFindUniqueArgs} args - Arguments to find a Imagens
     * @example
     * // Get one Imagens
     * const imagens = await prisma.imagens.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ImagensFindUniqueArgs>(args: SelectSubset<T, ImagensFindUniqueArgs<ExtArgs>>): Prisma__ImagensClient<$Result.GetResult<Prisma.$ImagensPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one Imagens that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ImagensFindUniqueOrThrowArgs} args - Arguments to find a Imagens
     * @example
     * // Get one Imagens
     * const imagens = await prisma.imagens.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ImagensFindUniqueOrThrowArgs>(args: SelectSubset<T, ImagensFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ImagensClient<$Result.GetResult<Prisma.$ImagensPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first Imagens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensFindFirstArgs} args - Arguments to find a Imagens
     * @example
     * // Get one Imagens
     * const imagens = await prisma.imagens.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ImagensFindFirstArgs>(args?: SelectSubset<T, ImagensFindFirstArgs<ExtArgs>>): Prisma__ImagensClient<$Result.GetResult<Prisma.$ImagensPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first Imagens that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensFindFirstOrThrowArgs} args - Arguments to find a Imagens
     * @example
     * // Get one Imagens
     * const imagens = await prisma.imagens.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ImagensFindFirstOrThrowArgs>(args?: SelectSubset<T, ImagensFindFirstOrThrowArgs<ExtArgs>>): Prisma__ImagensClient<$Result.GetResult<Prisma.$ImagensPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more Imagens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Imagens
     * const imagens = await prisma.imagens.findMany()
     * 
     * // Get first 10 Imagens
     * const imagens = await prisma.imagens.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imagensWithIdOnly = await prisma.imagens.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ImagensFindManyArgs>(args?: SelectSubset<T, ImagensFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagensPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a Imagens.
     * @param {ImagensCreateArgs} args - Arguments to create a Imagens.
     * @example
     * // Create one Imagens
     * const Imagens = await prisma.imagens.create({
     *   data: {
     *     // ... data to create a Imagens
     *   }
     * })
     * 
     */
    create<T extends ImagensCreateArgs>(args: SelectSubset<T, ImagensCreateArgs<ExtArgs>>): Prisma__ImagensClient<$Result.GetResult<Prisma.$ImagensPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many Imagens.
     * @param {ImagensCreateManyArgs} args - Arguments to create many Imagens.
     * @example
     * // Create many Imagens
     * const imagens = await prisma.imagens.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ImagensCreateManyArgs>(args?: SelectSubset<T, ImagensCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Imagens.
     * @param {ImagensDeleteArgs} args - Arguments to delete one Imagens.
     * @example
     * // Delete one Imagens
     * const Imagens = await prisma.imagens.delete({
     *   where: {
     *     // ... filter to delete one Imagens
     *   }
     * })
     * 
     */
    delete<T extends ImagensDeleteArgs>(args: SelectSubset<T, ImagensDeleteArgs<ExtArgs>>): Prisma__ImagensClient<$Result.GetResult<Prisma.$ImagensPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one Imagens.
     * @param {ImagensUpdateArgs} args - Arguments to update one Imagens.
     * @example
     * // Update one Imagens
     * const imagens = await prisma.imagens.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ImagensUpdateArgs>(args: SelectSubset<T, ImagensUpdateArgs<ExtArgs>>): Prisma__ImagensClient<$Result.GetResult<Prisma.$ImagensPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more Imagens.
     * @param {ImagensDeleteManyArgs} args - Arguments to filter Imagens to delete.
     * @example
     * // Delete a few Imagens
     * const { count } = await prisma.imagens.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ImagensDeleteManyArgs>(args?: SelectSubset<T, ImagensDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Imagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Imagens
     * const imagens = await prisma.imagens.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ImagensUpdateManyArgs>(args: SelectSubset<T, ImagensUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Imagens.
     * @param {ImagensUpsertArgs} args - Arguments to update or create a Imagens.
     * @example
     * // Update or create a Imagens
     * const imagens = await prisma.imagens.upsert({
     *   create: {
     *     // ... data to create a Imagens
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Imagens we want to update
     *   }
     * })
     */
    upsert<T extends ImagensUpsertArgs>(args: SelectSubset<T, ImagensUpsertArgs<ExtArgs>>): Prisma__ImagensClient<$Result.GetResult<Prisma.$ImagensPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of Imagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensCountArgs} args - Arguments to filter Imagens to count.
     * @example
     * // Count the number of Imagens
     * const count = await prisma.imagens.count({
     *   where: {
     *     // ... the filter for the Imagens we want to count
     *   }
     * })
    **/
    count<T extends ImagensCountArgs>(
      args?: Subset<T, ImagensCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImagensCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Imagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImagensAggregateArgs>(args: Subset<T, ImagensAggregateArgs>): Prisma.PrismaPromise<GetImagensAggregateType<T>>

    /**
     * Group by Imagens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImagensGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImagensGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImagensGroupByArgs['orderBy'] }
        : { orderBy?: ImagensGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImagensGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImagensGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Imagens model
   */
  readonly fields: ImagensFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Imagens.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImagensClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the Imagens model
   */ 
  interface ImagensFieldRefs {
    readonly id: FieldRef<"Imagens", 'String'>
    readonly product_id: FieldRef<"Imagens", 'Int'>
    readonly enabled: FieldRef<"Imagens", 'Boolean'>
    readonly path: FieldRef<"Imagens", 'String'>
    readonly userId: FieldRef<"Imagens", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Imagens findUnique
   */
  export type ImagensFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
    /**
     * Filter, which Imagens to fetch.
     */
    where: ImagensWhereUniqueInput
  }

  /**
   * Imagens findUniqueOrThrow
   */
  export type ImagensFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
    /**
     * Filter, which Imagens to fetch.
     */
    where: ImagensWhereUniqueInput
  }

  /**
   * Imagens findFirst
   */
  export type ImagensFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
    /**
     * Filter, which Imagens to fetch.
     */
    where?: ImagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imagens to fetch.
     */
    orderBy?: ImagensOrderByWithRelationInput | ImagensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Imagens.
     */
    cursor?: ImagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imagens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imagens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Imagens.
     */
    distinct?: ImagensScalarFieldEnum | ImagensScalarFieldEnum[]
  }

  /**
   * Imagens findFirstOrThrow
   */
  export type ImagensFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
    /**
     * Filter, which Imagens to fetch.
     */
    where?: ImagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imagens to fetch.
     */
    orderBy?: ImagensOrderByWithRelationInput | ImagensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Imagens.
     */
    cursor?: ImagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imagens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imagens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Imagens.
     */
    distinct?: ImagensScalarFieldEnum | ImagensScalarFieldEnum[]
  }

  /**
   * Imagens findMany
   */
  export type ImagensFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
    /**
     * Filter, which Imagens to fetch.
     */
    where?: ImagensWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Imagens to fetch.
     */
    orderBy?: ImagensOrderByWithRelationInput | ImagensOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Imagens.
     */
    cursor?: ImagensWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Imagens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Imagens.
     */
    skip?: number
    distinct?: ImagensScalarFieldEnum | ImagensScalarFieldEnum[]
  }

  /**
   * Imagens create
   */
  export type ImagensCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
    /**
     * The data needed to create a Imagens.
     */
    data: XOR<ImagensCreateInput, ImagensUncheckedCreateInput>
  }

  /**
   * Imagens createMany
   */
  export type ImagensCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Imagens.
     */
    data: ImagensCreateManyInput | ImagensCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Imagens update
   */
  export type ImagensUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
    /**
     * The data needed to update a Imagens.
     */
    data: XOR<ImagensUpdateInput, ImagensUncheckedUpdateInput>
    /**
     * Choose, which Imagens to update.
     */
    where: ImagensWhereUniqueInput
  }

  /**
   * Imagens updateMany
   */
  export type ImagensUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Imagens.
     */
    data: XOR<ImagensUpdateManyMutationInput, ImagensUncheckedUpdateManyInput>
    /**
     * Filter which Imagens to update
     */
    where?: ImagensWhereInput
  }

  /**
   * Imagens upsert
   */
  export type ImagensUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
    /**
     * The filter to search for the Imagens to update in case it exists.
     */
    where: ImagensWhereUniqueInput
    /**
     * In case the Imagens found by the `where` argument doesn't exist, create a new Imagens with this data.
     */
    create: XOR<ImagensCreateInput, ImagensUncheckedCreateInput>
    /**
     * In case the Imagens was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImagensUpdateInput, ImagensUncheckedUpdateInput>
  }

  /**
   * Imagens delete
   */
  export type ImagensDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
    /**
     * Filter which Imagens to delete.
     */
    where: ImagensWhereUniqueInput
  }

  /**
   * Imagens deleteMany
   */
  export type ImagensDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Imagens to delete
     */
    where?: ImagensWhereInput
  }

  /**
   * Imagens without action
   */
  export type ImagensDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Imagens
     */
    select?: ImagensSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImagensInclude<ExtArgs> | null
  }


  /**
   * Model OpcoesProdutos
   */

  export type AggregateOpcoesProdutos = {
    _count: OpcoesProdutosCountAggregateOutputType | null
    _avg: OpcoesProdutosAvgAggregateOutputType | null
    _sum: OpcoesProdutosSumAggregateOutputType | null
    _min: OpcoesProdutosMinAggregateOutputType | null
    _max: OpcoesProdutosMaxAggregateOutputType | null
  }

  export type OpcoesProdutosAvgAggregateOutputType = {
    id: number | null
    product_id: number | null
    radius: number | null
  }

  export type OpcoesProdutosSumAggregateOutputType = {
    id: number | null
    product_id: number | null
    radius: number | null
  }

  export type OpcoesProdutosMinAggregateOutputType = {
    id: number | null
    product_id: number | null
    title: string | null
    shape: $Enums.Shape | null
    radius: number | null
    type: $Enums.Type | null
    values: string | null
    userId: string | null
  }

  export type OpcoesProdutosMaxAggregateOutputType = {
    id: number | null
    product_id: number | null
    title: string | null
    shape: $Enums.Shape | null
    radius: number | null
    type: $Enums.Type | null
    values: string | null
    userId: string | null
  }

  export type OpcoesProdutosCountAggregateOutputType = {
    id: number
    product_id: number
    title: number
    shape: number
    radius: number
    type: number
    values: number
    userId: number
    _all: number
  }


  export type OpcoesProdutosAvgAggregateInputType = {
    id?: true
    product_id?: true
    radius?: true
  }

  export type OpcoesProdutosSumAggregateInputType = {
    id?: true
    product_id?: true
    radius?: true
  }

  export type OpcoesProdutosMinAggregateInputType = {
    id?: true
    product_id?: true
    title?: true
    shape?: true
    radius?: true
    type?: true
    values?: true
    userId?: true
  }

  export type OpcoesProdutosMaxAggregateInputType = {
    id?: true
    product_id?: true
    title?: true
    shape?: true
    radius?: true
    type?: true
    values?: true
    userId?: true
  }

  export type OpcoesProdutosCountAggregateInputType = {
    id?: true
    product_id?: true
    title?: true
    shape?: true
    radius?: true
    type?: true
    values?: true
    userId?: true
    _all?: true
  }

  export type OpcoesProdutosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpcoesProdutos to aggregate.
     */
    where?: OpcoesProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpcoesProdutos to fetch.
     */
    orderBy?: OpcoesProdutosOrderByWithRelationInput | OpcoesProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: OpcoesProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpcoesProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpcoesProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned OpcoesProdutos
    **/
    _count?: true | OpcoesProdutosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: OpcoesProdutosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: OpcoesProdutosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: OpcoesProdutosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: OpcoesProdutosMaxAggregateInputType
  }

  export type GetOpcoesProdutosAggregateType<T extends OpcoesProdutosAggregateArgs> = {
        [P in keyof T & keyof AggregateOpcoesProdutos]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateOpcoesProdutos[P]>
      : GetScalarType<T[P], AggregateOpcoesProdutos[P]>
  }




  export type OpcoesProdutosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: OpcoesProdutosWhereInput
    orderBy?: OpcoesProdutosOrderByWithAggregationInput | OpcoesProdutosOrderByWithAggregationInput[]
    by: OpcoesProdutosScalarFieldEnum[] | OpcoesProdutosScalarFieldEnum
    having?: OpcoesProdutosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: OpcoesProdutosCountAggregateInputType | true
    _avg?: OpcoesProdutosAvgAggregateInputType
    _sum?: OpcoesProdutosSumAggregateInputType
    _min?: OpcoesProdutosMinAggregateInputType
    _max?: OpcoesProdutosMaxAggregateInputType
  }

  export type OpcoesProdutosGroupByOutputType = {
    id: number
    product_id: number
    title: string
    shape: $Enums.Shape | null
    radius: number | null
    type: $Enums.Type | null
    values: string
    userId: string
    _count: OpcoesProdutosCountAggregateOutputType | null
    _avg: OpcoesProdutosAvgAggregateOutputType | null
    _sum: OpcoesProdutosSumAggregateOutputType | null
    _min: OpcoesProdutosMinAggregateOutputType | null
    _max: OpcoesProdutosMaxAggregateOutputType | null
  }

  type GetOpcoesProdutosGroupByPayload<T extends OpcoesProdutosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<OpcoesProdutosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof OpcoesProdutosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], OpcoesProdutosGroupByOutputType[P]>
            : GetScalarType<T[P], OpcoesProdutosGroupByOutputType[P]>
        }
      >
    >


  export type OpcoesProdutosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    product_id?: boolean
    title?: boolean
    shape?: boolean
    radius?: boolean
    type?: boolean
    values?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["opcoesProdutos"]>


  export type OpcoesProdutosSelectScalar = {
    id?: boolean
    product_id?: boolean
    title?: boolean
    shape?: boolean
    radius?: boolean
    type?: boolean
    values?: boolean
    userId?: boolean
  }

  export type OpcoesProdutosInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $OpcoesProdutosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "OpcoesProdutos"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      product_id: number
      title: string
      shape: $Enums.Shape | null
      radius: number | null
      type: $Enums.Type | null
      values: string
      userId: string
    }, ExtArgs["result"]["opcoesProdutos"]>
    composites: {}
  }

  type OpcoesProdutosGetPayload<S extends boolean | null | undefined | OpcoesProdutosDefaultArgs> = $Result.GetResult<Prisma.$OpcoesProdutosPayload, S>

  type OpcoesProdutosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<OpcoesProdutosFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: OpcoesProdutosCountAggregateInputType | true
    }

  export interface OpcoesProdutosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['OpcoesProdutos'], meta: { name: 'OpcoesProdutos' } }
    /**
     * Find zero or one OpcoesProdutos that matches the filter.
     * @param {OpcoesProdutosFindUniqueArgs} args - Arguments to find a OpcoesProdutos
     * @example
     * // Get one OpcoesProdutos
     * const opcoesProdutos = await prisma.opcoesProdutos.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends OpcoesProdutosFindUniqueArgs>(args: SelectSubset<T, OpcoesProdutosFindUniqueArgs<ExtArgs>>): Prisma__OpcoesProdutosClient<$Result.GetResult<Prisma.$OpcoesProdutosPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one OpcoesProdutos that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {OpcoesProdutosFindUniqueOrThrowArgs} args - Arguments to find a OpcoesProdutos
     * @example
     * // Get one OpcoesProdutos
     * const opcoesProdutos = await prisma.opcoesProdutos.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends OpcoesProdutosFindUniqueOrThrowArgs>(args: SelectSubset<T, OpcoesProdutosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__OpcoesProdutosClient<$Result.GetResult<Prisma.$OpcoesProdutosPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first OpcoesProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcoesProdutosFindFirstArgs} args - Arguments to find a OpcoesProdutos
     * @example
     * // Get one OpcoesProdutos
     * const opcoesProdutos = await prisma.opcoesProdutos.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends OpcoesProdutosFindFirstArgs>(args?: SelectSubset<T, OpcoesProdutosFindFirstArgs<ExtArgs>>): Prisma__OpcoesProdutosClient<$Result.GetResult<Prisma.$OpcoesProdutosPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first OpcoesProdutos that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcoesProdutosFindFirstOrThrowArgs} args - Arguments to find a OpcoesProdutos
     * @example
     * // Get one OpcoesProdutos
     * const opcoesProdutos = await prisma.opcoesProdutos.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends OpcoesProdutosFindFirstOrThrowArgs>(args?: SelectSubset<T, OpcoesProdutosFindFirstOrThrowArgs<ExtArgs>>): Prisma__OpcoesProdutosClient<$Result.GetResult<Prisma.$OpcoesProdutosPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more OpcoesProdutos that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcoesProdutosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all OpcoesProdutos
     * const opcoesProdutos = await prisma.opcoesProdutos.findMany()
     * 
     * // Get first 10 OpcoesProdutos
     * const opcoesProdutos = await prisma.opcoesProdutos.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const opcoesProdutosWithIdOnly = await prisma.opcoesProdutos.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends OpcoesProdutosFindManyArgs>(args?: SelectSubset<T, OpcoesProdutosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$OpcoesProdutosPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a OpcoesProdutos.
     * @param {OpcoesProdutosCreateArgs} args - Arguments to create a OpcoesProdutos.
     * @example
     * // Create one OpcoesProdutos
     * const OpcoesProdutos = await prisma.opcoesProdutos.create({
     *   data: {
     *     // ... data to create a OpcoesProdutos
     *   }
     * })
     * 
     */
    create<T extends OpcoesProdutosCreateArgs>(args: SelectSubset<T, OpcoesProdutosCreateArgs<ExtArgs>>): Prisma__OpcoesProdutosClient<$Result.GetResult<Prisma.$OpcoesProdutosPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many OpcoesProdutos.
     * @param {OpcoesProdutosCreateManyArgs} args - Arguments to create many OpcoesProdutos.
     * @example
     * // Create many OpcoesProdutos
     * const opcoesProdutos = await prisma.opcoesProdutos.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends OpcoesProdutosCreateManyArgs>(args?: SelectSubset<T, OpcoesProdutosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a OpcoesProdutos.
     * @param {OpcoesProdutosDeleteArgs} args - Arguments to delete one OpcoesProdutos.
     * @example
     * // Delete one OpcoesProdutos
     * const OpcoesProdutos = await prisma.opcoesProdutos.delete({
     *   where: {
     *     // ... filter to delete one OpcoesProdutos
     *   }
     * })
     * 
     */
    delete<T extends OpcoesProdutosDeleteArgs>(args: SelectSubset<T, OpcoesProdutosDeleteArgs<ExtArgs>>): Prisma__OpcoesProdutosClient<$Result.GetResult<Prisma.$OpcoesProdutosPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one OpcoesProdutos.
     * @param {OpcoesProdutosUpdateArgs} args - Arguments to update one OpcoesProdutos.
     * @example
     * // Update one OpcoesProdutos
     * const opcoesProdutos = await prisma.opcoesProdutos.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends OpcoesProdutosUpdateArgs>(args: SelectSubset<T, OpcoesProdutosUpdateArgs<ExtArgs>>): Prisma__OpcoesProdutosClient<$Result.GetResult<Prisma.$OpcoesProdutosPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more OpcoesProdutos.
     * @param {OpcoesProdutosDeleteManyArgs} args - Arguments to filter OpcoesProdutos to delete.
     * @example
     * // Delete a few OpcoesProdutos
     * const { count } = await prisma.opcoesProdutos.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends OpcoesProdutosDeleteManyArgs>(args?: SelectSubset<T, OpcoesProdutosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more OpcoesProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcoesProdutosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many OpcoesProdutos
     * const opcoesProdutos = await prisma.opcoesProdutos.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends OpcoesProdutosUpdateManyArgs>(args: SelectSubset<T, OpcoesProdutosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one OpcoesProdutos.
     * @param {OpcoesProdutosUpsertArgs} args - Arguments to update or create a OpcoesProdutos.
     * @example
     * // Update or create a OpcoesProdutos
     * const opcoesProdutos = await prisma.opcoesProdutos.upsert({
     *   create: {
     *     // ... data to create a OpcoesProdutos
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the OpcoesProdutos we want to update
     *   }
     * })
     */
    upsert<T extends OpcoesProdutosUpsertArgs>(args: SelectSubset<T, OpcoesProdutosUpsertArgs<ExtArgs>>): Prisma__OpcoesProdutosClient<$Result.GetResult<Prisma.$OpcoesProdutosPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of OpcoesProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcoesProdutosCountArgs} args - Arguments to filter OpcoesProdutos to count.
     * @example
     * // Count the number of OpcoesProdutos
     * const count = await prisma.opcoesProdutos.count({
     *   where: {
     *     // ... the filter for the OpcoesProdutos we want to count
     *   }
     * })
    **/
    count<T extends OpcoesProdutosCountArgs>(
      args?: Subset<T, OpcoesProdutosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], OpcoesProdutosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a OpcoesProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcoesProdutosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends OpcoesProdutosAggregateArgs>(args: Subset<T, OpcoesProdutosAggregateArgs>): Prisma.PrismaPromise<GetOpcoesProdutosAggregateType<T>>

    /**
     * Group by OpcoesProdutos.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {OpcoesProdutosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends OpcoesProdutosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: OpcoesProdutosGroupByArgs['orderBy'] }
        : { orderBy?: OpcoesProdutosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, OpcoesProdutosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetOpcoesProdutosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the OpcoesProdutos model
   */
  readonly fields: OpcoesProdutosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for OpcoesProdutos.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__OpcoesProdutosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the OpcoesProdutos model
   */ 
  interface OpcoesProdutosFieldRefs {
    readonly id: FieldRef<"OpcoesProdutos", 'Int'>
    readonly product_id: FieldRef<"OpcoesProdutos", 'Int'>
    readonly title: FieldRef<"OpcoesProdutos", 'String'>
    readonly shape: FieldRef<"OpcoesProdutos", 'Shape'>
    readonly radius: FieldRef<"OpcoesProdutos", 'Int'>
    readonly type: FieldRef<"OpcoesProdutos", 'Type'>
    readonly values: FieldRef<"OpcoesProdutos", 'String'>
    readonly userId: FieldRef<"OpcoesProdutos", 'String'>
  }
    

  // Custom InputTypes
  /**
   * OpcoesProdutos findUnique
   */
  export type OpcoesProdutosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
    /**
     * Filter, which OpcoesProdutos to fetch.
     */
    where: OpcoesProdutosWhereUniqueInput
  }

  /**
   * OpcoesProdutos findUniqueOrThrow
   */
  export type OpcoesProdutosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
    /**
     * Filter, which OpcoesProdutos to fetch.
     */
    where: OpcoesProdutosWhereUniqueInput
  }

  /**
   * OpcoesProdutos findFirst
   */
  export type OpcoesProdutosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
    /**
     * Filter, which OpcoesProdutos to fetch.
     */
    where?: OpcoesProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpcoesProdutos to fetch.
     */
    orderBy?: OpcoesProdutosOrderByWithRelationInput | OpcoesProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpcoesProdutos.
     */
    cursor?: OpcoesProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpcoesProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpcoesProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpcoesProdutos.
     */
    distinct?: OpcoesProdutosScalarFieldEnum | OpcoesProdutosScalarFieldEnum[]
  }

  /**
   * OpcoesProdutos findFirstOrThrow
   */
  export type OpcoesProdutosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
    /**
     * Filter, which OpcoesProdutos to fetch.
     */
    where?: OpcoesProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpcoesProdutos to fetch.
     */
    orderBy?: OpcoesProdutosOrderByWithRelationInput | OpcoesProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for OpcoesProdutos.
     */
    cursor?: OpcoesProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpcoesProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpcoesProdutos.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of OpcoesProdutos.
     */
    distinct?: OpcoesProdutosScalarFieldEnum | OpcoesProdutosScalarFieldEnum[]
  }

  /**
   * OpcoesProdutos findMany
   */
  export type OpcoesProdutosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
    /**
     * Filter, which OpcoesProdutos to fetch.
     */
    where?: OpcoesProdutosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of OpcoesProdutos to fetch.
     */
    orderBy?: OpcoesProdutosOrderByWithRelationInput | OpcoesProdutosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing OpcoesProdutos.
     */
    cursor?: OpcoesProdutosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` OpcoesProdutos from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` OpcoesProdutos.
     */
    skip?: number
    distinct?: OpcoesProdutosScalarFieldEnum | OpcoesProdutosScalarFieldEnum[]
  }

  /**
   * OpcoesProdutos create
   */
  export type OpcoesProdutosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
    /**
     * The data needed to create a OpcoesProdutos.
     */
    data: XOR<OpcoesProdutosCreateInput, OpcoesProdutosUncheckedCreateInput>
  }

  /**
   * OpcoesProdutos createMany
   */
  export type OpcoesProdutosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many OpcoesProdutos.
     */
    data: OpcoesProdutosCreateManyInput | OpcoesProdutosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * OpcoesProdutos update
   */
  export type OpcoesProdutosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
    /**
     * The data needed to update a OpcoesProdutos.
     */
    data: XOR<OpcoesProdutosUpdateInput, OpcoesProdutosUncheckedUpdateInput>
    /**
     * Choose, which OpcoesProdutos to update.
     */
    where: OpcoesProdutosWhereUniqueInput
  }

  /**
   * OpcoesProdutos updateMany
   */
  export type OpcoesProdutosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update OpcoesProdutos.
     */
    data: XOR<OpcoesProdutosUpdateManyMutationInput, OpcoesProdutosUncheckedUpdateManyInput>
    /**
     * Filter which OpcoesProdutos to update
     */
    where?: OpcoesProdutosWhereInput
  }

  /**
   * OpcoesProdutos upsert
   */
  export type OpcoesProdutosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
    /**
     * The filter to search for the OpcoesProdutos to update in case it exists.
     */
    where: OpcoesProdutosWhereUniqueInput
    /**
     * In case the OpcoesProdutos found by the `where` argument doesn't exist, create a new OpcoesProdutos with this data.
     */
    create: XOR<OpcoesProdutosCreateInput, OpcoesProdutosUncheckedCreateInput>
    /**
     * In case the OpcoesProdutos was found with the provided `where` argument, update it with this data.
     */
    update: XOR<OpcoesProdutosUpdateInput, OpcoesProdutosUncheckedUpdateInput>
  }

  /**
   * OpcoesProdutos delete
   */
  export type OpcoesProdutosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
    /**
     * Filter which OpcoesProdutos to delete.
     */
    where: OpcoesProdutosWhereUniqueInput
  }

  /**
   * OpcoesProdutos deleteMany
   */
  export type OpcoesProdutosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which OpcoesProdutos to delete
     */
    where?: OpcoesProdutosWhereInput
  }

  /**
   * OpcoesProdutos without action
   */
  export type OpcoesProdutosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the OpcoesProdutos
     */
    select?: OpcoesProdutosSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: OpcoesProdutosInclude<ExtArgs> | null
  }


  /**
   * Model ProdutoCategoria
   */

  export type AggregateProdutoCategoria = {
    _count: ProdutoCategoriaCountAggregateOutputType | null
    _avg: ProdutoCategoriaAvgAggregateOutputType | null
    _sum: ProdutoCategoriaSumAggregateOutputType | null
    _min: ProdutoCategoriaMinAggregateOutputType | null
    _max: ProdutoCategoriaMaxAggregateOutputType | null
  }

  export type ProdutoCategoriaAvgAggregateOutputType = {
    id: number | null
    categoria_id: number | null
    produto_id: number | null
  }

  export type ProdutoCategoriaSumAggregateOutputType = {
    id: number | null
    categoria_id: number | null
    produto_id: number | null
  }

  export type ProdutoCategoriaMinAggregateOutputType = {
    id: number | null
    categoria_id: number | null
    produto_id: number | null
    userId: string | null
  }

  export type ProdutoCategoriaMaxAggregateOutputType = {
    id: number | null
    categoria_id: number | null
    produto_id: number | null
    userId: string | null
  }

  export type ProdutoCategoriaCountAggregateOutputType = {
    id: number
    categoria_id: number
    produto_id: number
    userId: number
    _all: number
  }


  export type ProdutoCategoriaAvgAggregateInputType = {
    id?: true
    categoria_id?: true
    produto_id?: true
  }

  export type ProdutoCategoriaSumAggregateInputType = {
    id?: true
    categoria_id?: true
    produto_id?: true
  }

  export type ProdutoCategoriaMinAggregateInputType = {
    id?: true
    categoria_id?: true
    produto_id?: true
    userId?: true
  }

  export type ProdutoCategoriaMaxAggregateInputType = {
    id?: true
    categoria_id?: true
    produto_id?: true
    userId?: true
  }

  export type ProdutoCategoriaCountAggregateInputType = {
    id?: true
    categoria_id?: true
    produto_id?: true
    userId?: true
    _all?: true
  }

  export type ProdutoCategoriaAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutoCategoria to aggregate.
     */
    where?: ProdutoCategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoCategorias to fetch.
     */
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ProdutoCategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoCategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoCategorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned ProdutoCategorias
    **/
    _count?: true | ProdutoCategoriaCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ProdutoCategoriaAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ProdutoCategoriaSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ProdutoCategoriaMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ProdutoCategoriaMaxAggregateInputType
  }

  export type GetProdutoCategoriaAggregateType<T extends ProdutoCategoriaAggregateArgs> = {
        [P in keyof T & keyof AggregateProdutoCategoria]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateProdutoCategoria[P]>
      : GetScalarType<T[P], AggregateProdutoCategoria[P]>
  }




  export type ProdutoCategoriaGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ProdutoCategoriaWhereInput
    orderBy?: ProdutoCategoriaOrderByWithAggregationInput | ProdutoCategoriaOrderByWithAggregationInput[]
    by: ProdutoCategoriaScalarFieldEnum[] | ProdutoCategoriaScalarFieldEnum
    having?: ProdutoCategoriaScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ProdutoCategoriaCountAggregateInputType | true
    _avg?: ProdutoCategoriaAvgAggregateInputType
    _sum?: ProdutoCategoriaSumAggregateInputType
    _min?: ProdutoCategoriaMinAggregateInputType
    _max?: ProdutoCategoriaMaxAggregateInputType
  }

  export type ProdutoCategoriaGroupByOutputType = {
    id: number
    categoria_id: number
    produto_id: number
    userId: string
    _count: ProdutoCategoriaCountAggregateOutputType | null
    _avg: ProdutoCategoriaAvgAggregateOutputType | null
    _sum: ProdutoCategoriaSumAggregateOutputType | null
    _min: ProdutoCategoriaMinAggregateOutputType | null
    _max: ProdutoCategoriaMaxAggregateOutputType | null
  }

  type GetProdutoCategoriaGroupByPayload<T extends ProdutoCategoriaGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ProdutoCategoriaGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ProdutoCategoriaGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ProdutoCategoriaGroupByOutputType[P]>
            : GetScalarType<T[P], ProdutoCategoriaGroupByOutputType[P]>
        }
      >
    >


  export type ProdutoCategoriaSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    categoria_id?: boolean
    produto_id?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["produtoCategoria"]>


  export type ProdutoCategoriaSelectScalar = {
    id?: boolean
    categoria_id?: boolean
    produto_id?: boolean
    userId?: boolean
  }

  export type ProdutoCategoriaInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }

  export type $ProdutoCategoriaPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "ProdutoCategoria"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      categoria_id: number
      produto_id: number
      userId: string
    }, ExtArgs["result"]["produtoCategoria"]>
    composites: {}
  }

  type ProdutoCategoriaGetPayload<S extends boolean | null | undefined | ProdutoCategoriaDefaultArgs> = $Result.GetResult<Prisma.$ProdutoCategoriaPayload, S>

  type ProdutoCategoriaCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ProdutoCategoriaFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ProdutoCategoriaCountAggregateInputType | true
    }

  export interface ProdutoCategoriaDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['ProdutoCategoria'], meta: { name: 'ProdutoCategoria' } }
    /**
     * Find zero or one ProdutoCategoria that matches the filter.
     * @param {ProdutoCategoriaFindUniqueArgs} args - Arguments to find a ProdutoCategoria
     * @example
     * // Get one ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends ProdutoCategoriaFindUniqueArgs>(args: SelectSubset<T, ProdutoCategoriaFindUniqueArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findUnique"> | null, null, ExtArgs>

    /**
     * Find one ProdutoCategoria that matches the filter or throw an error with `error.code='P2025'` 
     * if no matches were found.
     * @param {ProdutoCategoriaFindUniqueOrThrowArgs} args - Arguments to find a ProdutoCategoria
     * @example
     * // Get one ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends ProdutoCategoriaFindUniqueOrThrowArgs>(args: SelectSubset<T, ProdutoCategoriaFindUniqueOrThrowArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findUniqueOrThrow">, never, ExtArgs>

    /**
     * Find the first ProdutoCategoria that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaFindFirstArgs} args - Arguments to find a ProdutoCategoria
     * @example
     * // Get one ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends ProdutoCategoriaFindFirstArgs>(args?: SelectSubset<T, ProdutoCategoriaFindFirstArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findFirst"> | null, null, ExtArgs>

    /**
     * Find the first ProdutoCategoria that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaFindFirstOrThrowArgs} args - Arguments to find a ProdutoCategoria
     * @example
     * // Get one ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends ProdutoCategoriaFindFirstOrThrowArgs>(args?: SelectSubset<T, ProdutoCategoriaFindFirstOrThrowArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findFirstOrThrow">, never, ExtArgs>

    /**
     * Find zero or more ProdutoCategorias that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all ProdutoCategorias
     * const produtoCategorias = await prisma.produtoCategoria.findMany()
     * 
     * // Get first 10 ProdutoCategorias
     * const produtoCategorias = await prisma.produtoCategoria.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const produtoCategoriaWithIdOnly = await prisma.produtoCategoria.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends ProdutoCategoriaFindManyArgs>(args?: SelectSubset<T, ProdutoCategoriaFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "findMany">>

    /**
     * Create a ProdutoCategoria.
     * @param {ProdutoCategoriaCreateArgs} args - Arguments to create a ProdutoCategoria.
     * @example
     * // Create one ProdutoCategoria
     * const ProdutoCategoria = await prisma.produtoCategoria.create({
     *   data: {
     *     // ... data to create a ProdutoCategoria
     *   }
     * })
     * 
     */
    create<T extends ProdutoCategoriaCreateArgs>(args: SelectSubset<T, ProdutoCategoriaCreateArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "create">, never, ExtArgs>

    /**
     * Create many ProdutoCategorias.
     * @param {ProdutoCategoriaCreateManyArgs} args - Arguments to create many ProdutoCategorias.
     * @example
     * // Create many ProdutoCategorias
     * const produtoCategoria = await prisma.produtoCategoria.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends ProdutoCategoriaCreateManyArgs>(args?: SelectSubset<T, ProdutoCategoriaCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a ProdutoCategoria.
     * @param {ProdutoCategoriaDeleteArgs} args - Arguments to delete one ProdutoCategoria.
     * @example
     * // Delete one ProdutoCategoria
     * const ProdutoCategoria = await prisma.produtoCategoria.delete({
     *   where: {
     *     // ... filter to delete one ProdutoCategoria
     *   }
     * })
     * 
     */
    delete<T extends ProdutoCategoriaDeleteArgs>(args: SelectSubset<T, ProdutoCategoriaDeleteArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "delete">, never, ExtArgs>

    /**
     * Update one ProdutoCategoria.
     * @param {ProdutoCategoriaUpdateArgs} args - Arguments to update one ProdutoCategoria.
     * @example
     * // Update one ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends ProdutoCategoriaUpdateArgs>(args: SelectSubset<T, ProdutoCategoriaUpdateArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "update">, never, ExtArgs>

    /**
     * Delete zero or more ProdutoCategorias.
     * @param {ProdutoCategoriaDeleteManyArgs} args - Arguments to filter ProdutoCategorias to delete.
     * @example
     * // Delete a few ProdutoCategorias
     * const { count } = await prisma.produtoCategoria.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends ProdutoCategoriaDeleteManyArgs>(args?: SelectSubset<T, ProdutoCategoriaDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more ProdutoCategorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many ProdutoCategorias
     * const produtoCategoria = await prisma.produtoCategoria.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends ProdutoCategoriaUpdateManyArgs>(args: SelectSubset<T, ProdutoCategoriaUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one ProdutoCategoria.
     * @param {ProdutoCategoriaUpsertArgs} args - Arguments to update or create a ProdutoCategoria.
     * @example
     * // Update or create a ProdutoCategoria
     * const produtoCategoria = await prisma.produtoCategoria.upsert({
     *   create: {
     *     // ... data to create a ProdutoCategoria
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the ProdutoCategoria we want to update
     *   }
     * })
     */
    upsert<T extends ProdutoCategoriaUpsertArgs>(args: SelectSubset<T, ProdutoCategoriaUpsertArgs<ExtArgs>>): Prisma__ProdutoCategoriaClient<$Result.GetResult<Prisma.$ProdutoCategoriaPayload<ExtArgs>, T, "upsert">, never, ExtArgs>


    /**
     * Count the number of ProdutoCategorias.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaCountArgs} args - Arguments to filter ProdutoCategorias to count.
     * @example
     * // Count the number of ProdutoCategorias
     * const count = await prisma.produtoCategoria.count({
     *   where: {
     *     // ... the filter for the ProdutoCategorias we want to count
     *   }
     * })
    **/
    count<T extends ProdutoCategoriaCountArgs>(
      args?: Subset<T, ProdutoCategoriaCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ProdutoCategoriaCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a ProdutoCategoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ProdutoCategoriaAggregateArgs>(args: Subset<T, ProdutoCategoriaAggregateArgs>): Prisma.PrismaPromise<GetProdutoCategoriaAggregateType<T>>

    /**
     * Group by ProdutoCategoria.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ProdutoCategoriaGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ProdutoCategoriaGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ProdutoCategoriaGroupByArgs['orderBy'] }
        : { orderBy?: ProdutoCategoriaGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ProdutoCategoriaGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetProdutoCategoriaGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the ProdutoCategoria model
   */
  readonly fields: ProdutoCategoriaFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for ProdutoCategoria.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ProdutoCategoriaClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, "findUniqueOrThrow"> | Null, Null, ExtArgs>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the ProdutoCategoria model
   */ 
  interface ProdutoCategoriaFieldRefs {
    readonly id: FieldRef<"ProdutoCategoria", 'Int'>
    readonly categoria_id: FieldRef<"ProdutoCategoria", 'Int'>
    readonly produto_id: FieldRef<"ProdutoCategoria", 'Int'>
    readonly userId: FieldRef<"ProdutoCategoria", 'String'>
  }
    

  // Custom InputTypes
  /**
   * ProdutoCategoria findUnique
   */
  export type ProdutoCategoriaFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoCategoria to fetch.
     */
    where: ProdutoCategoriaWhereUniqueInput
  }

  /**
   * ProdutoCategoria findUniqueOrThrow
   */
  export type ProdutoCategoriaFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoCategoria to fetch.
     */
    where: ProdutoCategoriaWhereUniqueInput
  }

  /**
   * ProdutoCategoria findFirst
   */
  export type ProdutoCategoriaFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoCategoria to fetch.
     */
    where?: ProdutoCategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoCategorias to fetch.
     */
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutoCategorias.
     */
    cursor?: ProdutoCategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoCategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoCategorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutoCategorias.
     */
    distinct?: ProdutoCategoriaScalarFieldEnum | ProdutoCategoriaScalarFieldEnum[]
  }

  /**
   * ProdutoCategoria findFirstOrThrow
   */
  export type ProdutoCategoriaFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoCategoria to fetch.
     */
    where?: ProdutoCategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoCategorias to fetch.
     */
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for ProdutoCategorias.
     */
    cursor?: ProdutoCategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoCategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoCategorias.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of ProdutoCategorias.
     */
    distinct?: ProdutoCategoriaScalarFieldEnum | ProdutoCategoriaScalarFieldEnum[]
  }

  /**
   * ProdutoCategoria findMany
   */
  export type ProdutoCategoriaFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter, which ProdutoCategorias to fetch.
     */
    where?: ProdutoCategoriaWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of ProdutoCategorias to fetch.
     */
    orderBy?: ProdutoCategoriaOrderByWithRelationInput | ProdutoCategoriaOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing ProdutoCategorias.
     */
    cursor?: ProdutoCategoriaWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` ProdutoCategorias from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` ProdutoCategorias.
     */
    skip?: number
    distinct?: ProdutoCategoriaScalarFieldEnum | ProdutoCategoriaScalarFieldEnum[]
  }

  /**
   * ProdutoCategoria create
   */
  export type ProdutoCategoriaCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * The data needed to create a ProdutoCategoria.
     */
    data: XOR<ProdutoCategoriaCreateInput, ProdutoCategoriaUncheckedCreateInput>
  }

  /**
   * ProdutoCategoria createMany
   */
  export type ProdutoCategoriaCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many ProdutoCategorias.
     */
    data: ProdutoCategoriaCreateManyInput | ProdutoCategoriaCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * ProdutoCategoria update
   */
  export type ProdutoCategoriaUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * The data needed to update a ProdutoCategoria.
     */
    data: XOR<ProdutoCategoriaUpdateInput, ProdutoCategoriaUncheckedUpdateInput>
    /**
     * Choose, which ProdutoCategoria to update.
     */
    where: ProdutoCategoriaWhereUniqueInput
  }

  /**
   * ProdutoCategoria updateMany
   */
  export type ProdutoCategoriaUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update ProdutoCategorias.
     */
    data: XOR<ProdutoCategoriaUpdateManyMutationInput, ProdutoCategoriaUncheckedUpdateManyInput>
    /**
     * Filter which ProdutoCategorias to update
     */
    where?: ProdutoCategoriaWhereInput
  }

  /**
   * ProdutoCategoria upsert
   */
  export type ProdutoCategoriaUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * The filter to search for the ProdutoCategoria to update in case it exists.
     */
    where: ProdutoCategoriaWhereUniqueInput
    /**
     * In case the ProdutoCategoria found by the `where` argument doesn't exist, create a new ProdutoCategoria with this data.
     */
    create: XOR<ProdutoCategoriaCreateInput, ProdutoCategoriaUncheckedCreateInput>
    /**
     * In case the ProdutoCategoria was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ProdutoCategoriaUpdateInput, ProdutoCategoriaUncheckedUpdateInput>
  }

  /**
   * ProdutoCategoria delete
   */
  export type ProdutoCategoriaDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
    /**
     * Filter which ProdutoCategoria to delete.
     */
    where: ProdutoCategoriaWhereUniqueInput
  }

  /**
   * ProdutoCategoria deleteMany
   */
  export type ProdutoCategoriaDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which ProdutoCategorias to delete
     */
    where?: ProdutoCategoriaWhereInput
  }

  /**
   * ProdutoCategoria without action
   */
  export type ProdutoCategoriaDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the ProdutoCategoria
     */
    select?: ProdutoCategoriaSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ProdutoCategoriaInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    id: 'id',
    username: 'username',
    email: 'email',
    password: 'password'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const CategoriaScalarFieldEnum: {
    id: 'id',
    nome: 'nome',
    slug: 'slug',
    use_in_menu: 'use_in_menu',
    userId: 'userId'
  };

  export type CategoriaScalarFieldEnum = (typeof CategoriaScalarFieldEnum)[keyof typeof CategoriaScalarFieldEnum]


  export const ProdutosScalarFieldEnum: {
    id: 'id',
    enabled: 'enabled',
    name: 'name',
    slug: 'slug',
    use_in_menu: 'use_in_menu',
    stock: 'stock',
    description: 'description',
    price: 'price',
    price_with_discount: 'price_with_discount',
    userId: 'userId'
  };

  export type ProdutosScalarFieldEnum = (typeof ProdutosScalarFieldEnum)[keyof typeof ProdutosScalarFieldEnum]


  export const ImagensScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    enabled: 'enabled',
    path: 'path',
    userId: 'userId'
  };

  export type ImagensScalarFieldEnum = (typeof ImagensScalarFieldEnum)[keyof typeof ImagensScalarFieldEnum]


  export const OpcoesProdutosScalarFieldEnum: {
    id: 'id',
    product_id: 'product_id',
    title: 'title',
    shape: 'shape',
    radius: 'radius',
    type: 'type',
    values: 'values',
    userId: 'userId'
  };

  export type OpcoesProdutosScalarFieldEnum = (typeof OpcoesProdutosScalarFieldEnum)[keyof typeof OpcoesProdutosScalarFieldEnum]


  export const ProdutoCategoriaScalarFieldEnum: {
    id: 'id',
    categoria_id: 'categoria_id',
    produto_id: 'produto_id',
    userId: 'userId'
  };

  export type ProdutoCategoriaScalarFieldEnum = (typeof ProdutoCategoriaScalarFieldEnum)[keyof typeof ProdutoCategoriaScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Shape'
   */
  export type EnumShapeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Shape'>
    


  /**
   * Reference to a field of type 'Type'
   */
  export type EnumTypeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Type'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    categoria?: CategoriaListRelationFilter
    produtos?: ProdutosListRelationFilter
    imagens?: ImagensListRelationFilter
    opcoesProdutos?: OpcoesProdutosListRelationFilter
    produtoCategoria?: ProdutoCategoriaListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    categoria?: CategoriaOrderByRelationAggregateInput
    produtos?: ProdutosOrderByRelationAggregateInput
    imagens?: ImagensOrderByRelationAggregateInput
    opcoesProdutos?: OpcoesProdutosOrderByRelationAggregateInput
    produtoCategoria?: ProdutoCategoriaOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    username?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    categoria?: CategoriaListRelationFilter
    produtos?: ProdutosListRelationFilter
    imagens?: ImagensListRelationFilter
    opcoesProdutos?: OpcoesProdutosListRelationFilter
    produtoCategoria?: ProdutoCategoriaListRelationFilter
  }, "id">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    username?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
  }

  export type CategoriaWhereInput = {
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    id?: StringFilter<"Categoria"> | string
    nome?: StringFilter<"Categoria"> | string
    slug?: StringFilter<"Categoria"> | string
    use_in_menu?: BoolFilter<"Categoria"> | boolean
    userId?: StringFilter<"Categoria"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type CategoriaOrderByWithRelationInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    use_in_menu?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type CategoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CategoriaWhereInput | CategoriaWhereInput[]
    OR?: CategoriaWhereInput[]
    NOT?: CategoriaWhereInput | CategoriaWhereInput[]
    nome?: StringFilter<"Categoria"> | string
    slug?: StringFilter<"Categoria"> | string
    use_in_menu?: BoolFilter<"Categoria"> | boolean
    userId?: StringFilter<"Categoria"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type CategoriaOrderByWithAggregationInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    use_in_menu?: SortOrder
    userId?: SortOrder
    _count?: CategoriaCountOrderByAggregateInput
    _max?: CategoriaMaxOrderByAggregateInput
    _min?: CategoriaMinOrderByAggregateInput
  }

  export type CategoriaScalarWhereWithAggregatesInput = {
    AND?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    OR?: CategoriaScalarWhereWithAggregatesInput[]
    NOT?: CategoriaScalarWhereWithAggregatesInput | CategoriaScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Categoria"> | string
    nome?: StringWithAggregatesFilter<"Categoria"> | string
    slug?: StringWithAggregatesFilter<"Categoria"> | string
    use_in_menu?: BoolWithAggregatesFilter<"Categoria"> | boolean
    userId?: StringWithAggregatesFilter<"Categoria"> | string
  }

  export type ProdutosWhereInput = {
    AND?: ProdutosWhereInput | ProdutosWhereInput[]
    OR?: ProdutosWhereInput[]
    NOT?: ProdutosWhereInput | ProdutosWhereInput[]
    id?: StringFilter<"Produtos"> | string
    enabled?: BoolFilter<"Produtos"> | boolean
    name?: StringFilter<"Produtos"> | string
    slug?: StringFilter<"Produtos"> | string
    use_in_menu?: BoolFilter<"Produtos"> | boolean
    stock?: IntFilter<"Produtos"> | number
    description?: StringFilter<"Produtos"> | string
    price?: FloatFilter<"Produtos"> | number
    price_with_discount?: FloatFilter<"Produtos"> | number
    userId?: StringFilter<"Produtos"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProdutosOrderByWithRelationInput = {
    id?: SortOrder
    enabled?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    use_in_menu?: SortOrder
    stock?: SortOrder
    description?: SortOrder
    price?: SortOrder
    price_with_discount?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProdutosWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ProdutosWhereInput | ProdutosWhereInput[]
    OR?: ProdutosWhereInput[]
    NOT?: ProdutosWhereInput | ProdutosWhereInput[]
    enabled?: BoolFilter<"Produtos"> | boolean
    name?: StringFilter<"Produtos"> | string
    slug?: StringFilter<"Produtos"> | string
    use_in_menu?: BoolFilter<"Produtos"> | boolean
    stock?: IntFilter<"Produtos"> | number
    description?: StringFilter<"Produtos"> | string
    price?: FloatFilter<"Produtos"> | number
    price_with_discount?: FloatFilter<"Produtos"> | number
    userId?: StringFilter<"Produtos"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ProdutosOrderByWithAggregationInput = {
    id?: SortOrder
    enabled?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    use_in_menu?: SortOrder
    stock?: SortOrder
    description?: SortOrder
    price?: SortOrder
    price_with_discount?: SortOrder
    userId?: SortOrder
    _count?: ProdutosCountOrderByAggregateInput
    _avg?: ProdutosAvgOrderByAggregateInput
    _max?: ProdutosMaxOrderByAggregateInput
    _min?: ProdutosMinOrderByAggregateInput
    _sum?: ProdutosSumOrderByAggregateInput
  }

  export type ProdutosScalarWhereWithAggregatesInput = {
    AND?: ProdutosScalarWhereWithAggregatesInput | ProdutosScalarWhereWithAggregatesInput[]
    OR?: ProdutosScalarWhereWithAggregatesInput[]
    NOT?: ProdutosScalarWhereWithAggregatesInput | ProdutosScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Produtos"> | string
    enabled?: BoolWithAggregatesFilter<"Produtos"> | boolean
    name?: StringWithAggregatesFilter<"Produtos"> | string
    slug?: StringWithAggregatesFilter<"Produtos"> | string
    use_in_menu?: BoolWithAggregatesFilter<"Produtos"> | boolean
    stock?: IntWithAggregatesFilter<"Produtos"> | number
    description?: StringWithAggregatesFilter<"Produtos"> | string
    price?: FloatWithAggregatesFilter<"Produtos"> | number
    price_with_discount?: FloatWithAggregatesFilter<"Produtos"> | number
    userId?: StringWithAggregatesFilter<"Produtos"> | string
  }

  export type ImagensWhereInput = {
    AND?: ImagensWhereInput | ImagensWhereInput[]
    OR?: ImagensWhereInput[]
    NOT?: ImagensWhereInput | ImagensWhereInput[]
    id?: StringFilter<"Imagens"> | string
    product_id?: IntFilter<"Imagens"> | number
    enabled?: BoolFilter<"Imagens"> | boolean
    path?: StringFilter<"Imagens"> | string
    userId?: StringFilter<"Imagens"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ImagensOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    enabled?: SortOrder
    path?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ImagensWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ImagensWhereInput | ImagensWhereInput[]
    OR?: ImagensWhereInput[]
    NOT?: ImagensWhereInput | ImagensWhereInput[]
    product_id?: IntFilter<"Imagens"> | number
    enabled?: BoolFilter<"Imagens"> | boolean
    path?: StringFilter<"Imagens"> | string
    userId?: StringFilter<"Imagens"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ImagensOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    enabled?: SortOrder
    path?: SortOrder
    userId?: SortOrder
    _count?: ImagensCountOrderByAggregateInput
    _avg?: ImagensAvgOrderByAggregateInput
    _max?: ImagensMaxOrderByAggregateInput
    _min?: ImagensMinOrderByAggregateInput
    _sum?: ImagensSumOrderByAggregateInput
  }

  export type ImagensScalarWhereWithAggregatesInput = {
    AND?: ImagensScalarWhereWithAggregatesInput | ImagensScalarWhereWithAggregatesInput[]
    OR?: ImagensScalarWhereWithAggregatesInput[]
    NOT?: ImagensScalarWhereWithAggregatesInput | ImagensScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Imagens"> | string
    product_id?: IntWithAggregatesFilter<"Imagens"> | number
    enabled?: BoolWithAggregatesFilter<"Imagens"> | boolean
    path?: StringWithAggregatesFilter<"Imagens"> | string
    userId?: StringWithAggregatesFilter<"Imagens"> | string
  }

  export type OpcoesProdutosWhereInput = {
    AND?: OpcoesProdutosWhereInput | OpcoesProdutosWhereInput[]
    OR?: OpcoesProdutosWhereInput[]
    NOT?: OpcoesProdutosWhereInput | OpcoesProdutosWhereInput[]
    id?: IntFilter<"OpcoesProdutos"> | number
    product_id?: IntFilter<"OpcoesProdutos"> | number
    title?: StringFilter<"OpcoesProdutos"> | string
    shape?: EnumShapeNullableFilter<"OpcoesProdutos"> | $Enums.Shape | null
    radius?: IntNullableFilter<"OpcoesProdutos"> | number | null
    type?: EnumTypeNullableFilter<"OpcoesProdutos"> | $Enums.Type | null
    values?: StringFilter<"OpcoesProdutos"> | string
    userId?: StringFilter<"OpcoesProdutos"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type OpcoesProdutosOrderByWithRelationInput = {
    id?: SortOrder
    product_id?: SortOrder
    title?: SortOrder
    shape?: SortOrderInput | SortOrder
    radius?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    values?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type OpcoesProdutosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: OpcoesProdutosWhereInput | OpcoesProdutosWhereInput[]
    OR?: OpcoesProdutosWhereInput[]
    NOT?: OpcoesProdutosWhereInput | OpcoesProdutosWhereInput[]
    product_id?: IntFilter<"OpcoesProdutos"> | number
    title?: StringFilter<"OpcoesProdutos"> | string
    shape?: EnumShapeNullableFilter<"OpcoesProdutos"> | $Enums.Shape | null
    radius?: IntNullableFilter<"OpcoesProdutos"> | number | null
    type?: EnumTypeNullableFilter<"OpcoesProdutos"> | $Enums.Type | null
    values?: StringFilter<"OpcoesProdutos"> | string
    userId?: StringFilter<"OpcoesProdutos"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type OpcoesProdutosOrderByWithAggregationInput = {
    id?: SortOrder
    product_id?: SortOrder
    title?: SortOrder
    shape?: SortOrderInput | SortOrder
    radius?: SortOrderInput | SortOrder
    type?: SortOrderInput | SortOrder
    values?: SortOrder
    userId?: SortOrder
    _count?: OpcoesProdutosCountOrderByAggregateInput
    _avg?: OpcoesProdutosAvgOrderByAggregateInput
    _max?: OpcoesProdutosMaxOrderByAggregateInput
    _min?: OpcoesProdutosMinOrderByAggregateInput
    _sum?: OpcoesProdutosSumOrderByAggregateInput
  }

  export type OpcoesProdutosScalarWhereWithAggregatesInput = {
    AND?: OpcoesProdutosScalarWhereWithAggregatesInput | OpcoesProdutosScalarWhereWithAggregatesInput[]
    OR?: OpcoesProdutosScalarWhereWithAggregatesInput[]
    NOT?: OpcoesProdutosScalarWhereWithAggregatesInput | OpcoesProdutosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"OpcoesProdutos"> | number
    product_id?: IntWithAggregatesFilter<"OpcoesProdutos"> | number
    title?: StringWithAggregatesFilter<"OpcoesProdutos"> | string
    shape?: EnumShapeNullableWithAggregatesFilter<"OpcoesProdutos"> | $Enums.Shape | null
    radius?: IntNullableWithAggregatesFilter<"OpcoesProdutos"> | number | null
    type?: EnumTypeNullableWithAggregatesFilter<"OpcoesProdutos"> | $Enums.Type | null
    values?: StringWithAggregatesFilter<"OpcoesProdutos"> | string
    userId?: StringWithAggregatesFilter<"OpcoesProdutos"> | string
  }

  export type ProdutoCategoriaWhereInput = {
    AND?: ProdutoCategoriaWhereInput | ProdutoCategoriaWhereInput[]
    OR?: ProdutoCategoriaWhereInput[]
    NOT?: ProdutoCategoriaWhereInput | ProdutoCategoriaWhereInput[]
    id?: IntFilter<"ProdutoCategoria"> | number
    categoria_id?: IntFilter<"ProdutoCategoria"> | number
    produto_id?: IntFilter<"ProdutoCategoria"> | number
    userId?: StringFilter<"ProdutoCategoria"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type ProdutoCategoriaOrderByWithRelationInput = {
    id?: SortOrder
    categoria_id?: SortOrder
    produto_id?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type ProdutoCategoriaWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: ProdutoCategoriaWhereInput | ProdutoCategoriaWhereInput[]
    OR?: ProdutoCategoriaWhereInput[]
    NOT?: ProdutoCategoriaWhereInput | ProdutoCategoriaWhereInput[]
    categoria_id?: IntFilter<"ProdutoCategoria"> | number
    produto_id?: IntFilter<"ProdutoCategoria"> | number
    userId?: StringFilter<"ProdutoCategoria"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id">

  export type ProdutoCategoriaOrderByWithAggregationInput = {
    id?: SortOrder
    categoria_id?: SortOrder
    produto_id?: SortOrder
    userId?: SortOrder
    _count?: ProdutoCategoriaCountOrderByAggregateInput
    _avg?: ProdutoCategoriaAvgOrderByAggregateInput
    _max?: ProdutoCategoriaMaxOrderByAggregateInput
    _min?: ProdutoCategoriaMinOrderByAggregateInput
    _sum?: ProdutoCategoriaSumOrderByAggregateInput
  }

  export type ProdutoCategoriaScalarWhereWithAggregatesInput = {
    AND?: ProdutoCategoriaScalarWhereWithAggregatesInput | ProdutoCategoriaScalarWhereWithAggregatesInput[]
    OR?: ProdutoCategoriaScalarWhereWithAggregatesInput[]
    NOT?: ProdutoCategoriaScalarWhereWithAggregatesInput | ProdutoCategoriaScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"ProdutoCategoria"> | number
    categoria_id?: IntWithAggregatesFilter<"ProdutoCategoria"> | number
    produto_id?: IntWithAggregatesFilter<"ProdutoCategoria"> | number
    userId?: StringWithAggregatesFilter<"ProdutoCategoria"> | string
  }

  export type UserCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    categoria?: CategoriaCreateNestedManyWithoutUserInput
    produtos?: ProdutosCreateNestedManyWithoutUserInput
    imagens?: ImagensCreateNestedManyWithoutUserInput
    opcoesProdutos?: OpcoesProdutosCreateNestedManyWithoutUserInput
    produtoCategoria?: ProdutoCategoriaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    username: string
    email: string
    password: string
    categoria?: CategoriaUncheckedCreateNestedManyWithoutUserInput
    produtos?: ProdutosUncheckedCreateNestedManyWithoutUserInput
    imagens?: ImagensUncheckedCreateNestedManyWithoutUserInput
    opcoesProdutos?: OpcoesProdutosUncheckedCreateNestedManyWithoutUserInput
    produtoCategoria?: ProdutoCategoriaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUpdateManyWithoutUserNestedInput
    produtos?: ProdutosUpdateManyWithoutUserNestedInput
    imagens?: ImagensUpdateManyWithoutUserNestedInput
    opcoesProdutos?: OpcoesProdutosUpdateManyWithoutUserNestedInput
    produtoCategoria?: ProdutoCategoriaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUncheckedUpdateManyWithoutUserNestedInput
    produtos?: ProdutosUncheckedUpdateManyWithoutUserNestedInput
    imagens?: ImagensUncheckedUpdateManyWithoutUserNestedInput
    opcoesProdutos?: OpcoesProdutosUncheckedUpdateManyWithoutUserNestedInput
    produtoCategoria?: ProdutoCategoriaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    username: string
    email: string
    password: string
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaCreateInput = {
    id?: string
    nome: string
    slug: string
    use_in_menu: boolean
    user: UserCreateNestedOneWithoutCategoriaInput
  }

  export type CategoriaUncheckedCreateInput = {
    id?: string
    nome: string
    slug: string
    use_in_menu: boolean
    userId: string
  }

  export type CategoriaUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCategoriaNestedInput
  }

  export type CategoriaUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoriaCreateManyInput = {
    id?: string
    nome: string
    slug: string
    use_in_menu: boolean
    userId: string
  }

  export type CategoriaUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoriaUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutosCreateInput = {
    id?: string
    enabled: boolean
    name: string
    slug: string
    use_in_menu: boolean
    stock: number
    description: string
    price: number
    price_with_discount: number
    user: UserCreateNestedOneWithoutProdutosInput
  }

  export type ProdutosUncheckedCreateInput = {
    id?: string
    enabled: boolean
    name: string
    slug: string
    use_in_menu: boolean
    stock: number
    description: string
    price: number
    price_with_discount: number
    userId: string
  }

  export type ProdutosUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
    stock?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    price_with_discount?: FloatFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutProdutosNestedInput
  }

  export type ProdutosUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
    stock?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    price_with_discount?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutosCreateManyInput = {
    id?: string
    enabled: boolean
    name: string
    slug: string
    use_in_menu: boolean
    stock: number
    description: string
    price: number
    price_with_discount: number
    userId: string
  }

  export type ProdutosUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
    stock?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    price_with_discount?: FloatFieldUpdateOperationsInput | number
  }

  export type ProdutosUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
    stock?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    price_with_discount?: FloatFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ImagensCreateInput = {
    id?: string
    product_id: number
    enabled: boolean
    path: string
    user: UserCreateNestedOneWithoutImagensInput
  }

  export type ImagensUncheckedCreateInput = {
    id?: string
    product_id: number
    enabled: boolean
    path: string
    userId: string
  }

  export type ImagensUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    path?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutImagensNestedInput
  }

  export type ImagensUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    path?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ImagensCreateManyInput = {
    id?: string
    product_id: number
    enabled: boolean
    path: string
    userId: string
  }

  export type ImagensUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ImagensUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    path?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type OpcoesProdutosCreateInput = {
    product_id: number
    title: string
    shape?: $Enums.Shape | null
    radius?: number | null
    type?: $Enums.Type | null
    values: string
    user: UserCreateNestedOneWithoutOpcoesProdutosInput
  }

  export type OpcoesProdutosUncheckedCreateInput = {
    id?: number
    product_id: number
    title: string
    shape?: $Enums.Shape | null
    radius?: number | null
    type?: $Enums.Type | null
    values: string
    userId: string
  }

  export type OpcoesProdutosUpdateInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    shape?: NullableEnumShapeFieldUpdateOperationsInput | $Enums.Shape | null
    radius?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
    values?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutOpcoesProdutosNestedInput
  }

  export type OpcoesProdutosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    shape?: NullableEnumShapeFieldUpdateOperationsInput | $Enums.Shape | null
    radius?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
    values?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type OpcoesProdutosCreateManyInput = {
    id?: number
    product_id: number
    title: string
    shape?: $Enums.Shape | null
    radius?: number | null
    type?: $Enums.Type | null
    values: string
    userId: string
  }

  export type OpcoesProdutosUpdateManyMutationInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    shape?: NullableEnumShapeFieldUpdateOperationsInput | $Enums.Shape | null
    radius?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
    values?: StringFieldUpdateOperationsInput | string
  }

  export type OpcoesProdutosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    shape?: NullableEnumShapeFieldUpdateOperationsInput | $Enums.Shape | null
    radius?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
    values?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoCategoriaCreateInput = {
    categoria_id: number
    produto_id: number
    user: UserCreateNestedOneWithoutProdutoCategoriaInput
  }

  export type ProdutoCategoriaUncheckedCreateInput = {
    id?: number
    categoria_id: number
    produto_id: number
    userId: string
  }

  export type ProdutoCategoriaUpdateInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
    user?: UserUpdateOneRequiredWithoutProdutoCategoriaNestedInput
  }

  export type ProdutoCategoriaUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoCategoriaCreateManyInput = {
    id?: number
    categoria_id: number
    produto_id: number
    userId: string
  }

  export type ProdutoCategoriaUpdateManyMutationInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCategoriaUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type CategoriaListRelationFilter = {
    every?: CategoriaWhereInput
    some?: CategoriaWhereInput
    none?: CategoriaWhereInput
  }

  export type ProdutosListRelationFilter = {
    every?: ProdutosWhereInput
    some?: ProdutosWhereInput
    none?: ProdutosWhereInput
  }

  export type ImagensListRelationFilter = {
    every?: ImagensWhereInput
    some?: ImagensWhereInput
    none?: ImagensWhereInput
  }

  export type OpcoesProdutosListRelationFilter = {
    every?: OpcoesProdutosWhereInput
    some?: OpcoesProdutosWhereInput
    none?: OpcoesProdutosWhereInput
  }

  export type ProdutoCategoriaListRelationFilter = {
    every?: ProdutoCategoriaWhereInput
    some?: ProdutoCategoriaWhereInput
    none?: ProdutoCategoriaWhereInput
  }

  export type CategoriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProdutosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ImagensOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type OpcoesProdutosOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type ProdutoCategoriaOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    username?: SortOrder
    email?: SortOrder
    password?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type CategoriaCountOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    use_in_menu?: SortOrder
    userId?: SortOrder
  }

  export type CategoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    use_in_menu?: SortOrder
    userId?: SortOrder
  }

  export type CategoriaMinOrderByAggregateInput = {
    id?: SortOrder
    nome?: SortOrder
    slug?: SortOrder
    use_in_menu?: SortOrder
    userId?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type ProdutosCountOrderByAggregateInput = {
    id?: SortOrder
    enabled?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    use_in_menu?: SortOrder
    stock?: SortOrder
    description?: SortOrder
    price?: SortOrder
    price_with_discount?: SortOrder
    userId?: SortOrder
  }

  export type ProdutosAvgOrderByAggregateInput = {
    stock?: SortOrder
    price?: SortOrder
    price_with_discount?: SortOrder
  }

  export type ProdutosMaxOrderByAggregateInput = {
    id?: SortOrder
    enabled?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    use_in_menu?: SortOrder
    stock?: SortOrder
    description?: SortOrder
    price?: SortOrder
    price_with_discount?: SortOrder
    userId?: SortOrder
  }

  export type ProdutosMinOrderByAggregateInput = {
    id?: SortOrder
    enabled?: SortOrder
    name?: SortOrder
    slug?: SortOrder
    use_in_menu?: SortOrder
    stock?: SortOrder
    description?: SortOrder
    price?: SortOrder
    price_with_discount?: SortOrder
    userId?: SortOrder
  }

  export type ProdutosSumOrderByAggregateInput = {
    stock?: SortOrder
    price?: SortOrder
    price_with_discount?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type ImagensCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    enabled?: SortOrder
    path?: SortOrder
    userId?: SortOrder
  }

  export type ImagensAvgOrderByAggregateInput = {
    product_id?: SortOrder
  }

  export type ImagensMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    enabled?: SortOrder
    path?: SortOrder
    userId?: SortOrder
  }

  export type ImagensMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    enabled?: SortOrder
    path?: SortOrder
    userId?: SortOrder
  }

  export type ImagensSumOrderByAggregateInput = {
    product_id?: SortOrder
  }

  export type EnumShapeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Shape | EnumShapeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Shape[] | null
    notIn?: $Enums.Shape[] | null
    not?: NestedEnumShapeNullableFilter<$PrismaModel> | $Enums.Shape | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type EnumTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Type[] | null
    notIn?: $Enums.Type[] | null
    not?: NestedEnumTypeNullableFilter<$PrismaModel> | $Enums.Type | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type OpcoesProdutosCountOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    title?: SortOrder
    shape?: SortOrder
    radius?: SortOrder
    type?: SortOrder
    values?: SortOrder
    userId?: SortOrder
  }

  export type OpcoesProdutosAvgOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    radius?: SortOrder
  }

  export type OpcoesProdutosMaxOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    title?: SortOrder
    shape?: SortOrder
    radius?: SortOrder
    type?: SortOrder
    values?: SortOrder
    userId?: SortOrder
  }

  export type OpcoesProdutosMinOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    title?: SortOrder
    shape?: SortOrder
    radius?: SortOrder
    type?: SortOrder
    values?: SortOrder
    userId?: SortOrder
  }

  export type OpcoesProdutosSumOrderByAggregateInput = {
    id?: SortOrder
    product_id?: SortOrder
    radius?: SortOrder
  }

  export type EnumShapeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Shape | EnumShapeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Shape[] | null
    notIn?: $Enums.Shape[] | null
    not?: NestedEnumShapeNullableWithAggregatesFilter<$PrismaModel> | $Enums.Shape | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumShapeNullableFilter<$PrismaModel>
    _max?: NestedEnumShapeNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type EnumTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Type[] | null
    notIn?: $Enums.Type[] | null
    not?: NestedEnumTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.Type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumTypeNullableFilter<$PrismaModel>
  }

  export type ProdutoCategoriaCountOrderByAggregateInput = {
    id?: SortOrder
    categoria_id?: SortOrder
    produto_id?: SortOrder
    userId?: SortOrder
  }

  export type ProdutoCategoriaAvgOrderByAggregateInput = {
    id?: SortOrder
    categoria_id?: SortOrder
    produto_id?: SortOrder
  }

  export type ProdutoCategoriaMaxOrderByAggregateInput = {
    id?: SortOrder
    categoria_id?: SortOrder
    produto_id?: SortOrder
    userId?: SortOrder
  }

  export type ProdutoCategoriaMinOrderByAggregateInput = {
    id?: SortOrder
    categoria_id?: SortOrder
    produto_id?: SortOrder
    userId?: SortOrder
  }

  export type ProdutoCategoriaSumOrderByAggregateInput = {
    id?: SortOrder
    categoria_id?: SortOrder
    produto_id?: SortOrder
  }

  export type CategoriaCreateNestedManyWithoutUserInput = {
    create?: XOR<CategoriaCreateWithoutUserInput, CategoriaUncheckedCreateWithoutUserInput> | CategoriaCreateWithoutUserInput[] | CategoriaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoriaCreateOrConnectWithoutUserInput | CategoriaCreateOrConnectWithoutUserInput[]
    createMany?: CategoriaCreateManyUserInputEnvelope
    connect?: CategoriaWhereUniqueInput | CategoriaWhereUniqueInput[]
  }

  export type ProdutosCreateNestedManyWithoutUserInput = {
    create?: XOR<ProdutosCreateWithoutUserInput, ProdutosUncheckedCreateWithoutUserInput> | ProdutosCreateWithoutUserInput[] | ProdutosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutosCreateOrConnectWithoutUserInput | ProdutosCreateOrConnectWithoutUserInput[]
    createMany?: ProdutosCreateManyUserInputEnvelope
    connect?: ProdutosWhereUniqueInput | ProdutosWhereUniqueInput[]
  }

  export type ImagensCreateNestedManyWithoutUserInput = {
    create?: XOR<ImagensCreateWithoutUserInput, ImagensUncheckedCreateWithoutUserInput> | ImagensCreateWithoutUserInput[] | ImagensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImagensCreateOrConnectWithoutUserInput | ImagensCreateOrConnectWithoutUserInput[]
    createMany?: ImagensCreateManyUserInputEnvelope
    connect?: ImagensWhereUniqueInput | ImagensWhereUniqueInput[]
  }

  export type OpcoesProdutosCreateNestedManyWithoutUserInput = {
    create?: XOR<OpcoesProdutosCreateWithoutUserInput, OpcoesProdutosUncheckedCreateWithoutUserInput> | OpcoesProdutosCreateWithoutUserInput[] | OpcoesProdutosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OpcoesProdutosCreateOrConnectWithoutUserInput | OpcoesProdutosCreateOrConnectWithoutUserInput[]
    createMany?: OpcoesProdutosCreateManyUserInputEnvelope
    connect?: OpcoesProdutosWhereUniqueInput | OpcoesProdutosWhereUniqueInput[]
  }

  export type ProdutoCategoriaCreateNestedManyWithoutUserInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutUserInput, ProdutoCategoriaUncheckedCreateWithoutUserInput> | ProdutoCategoriaCreateWithoutUserInput[] | ProdutoCategoriaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutUserInput | ProdutoCategoriaCreateOrConnectWithoutUserInput[]
    createMany?: ProdutoCategoriaCreateManyUserInputEnvelope
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
  }

  export type CategoriaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CategoriaCreateWithoutUserInput, CategoriaUncheckedCreateWithoutUserInput> | CategoriaCreateWithoutUserInput[] | CategoriaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoriaCreateOrConnectWithoutUserInput | CategoriaCreateOrConnectWithoutUserInput[]
    createMany?: CategoriaCreateManyUserInputEnvelope
    connect?: CategoriaWhereUniqueInput | CategoriaWhereUniqueInput[]
  }

  export type ProdutosUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProdutosCreateWithoutUserInput, ProdutosUncheckedCreateWithoutUserInput> | ProdutosCreateWithoutUserInput[] | ProdutosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutosCreateOrConnectWithoutUserInput | ProdutosCreateOrConnectWithoutUserInput[]
    createMany?: ProdutosCreateManyUserInputEnvelope
    connect?: ProdutosWhereUniqueInput | ProdutosWhereUniqueInput[]
  }

  export type ImagensUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ImagensCreateWithoutUserInput, ImagensUncheckedCreateWithoutUserInput> | ImagensCreateWithoutUserInput[] | ImagensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImagensCreateOrConnectWithoutUserInput | ImagensCreateOrConnectWithoutUserInput[]
    createMany?: ImagensCreateManyUserInputEnvelope
    connect?: ImagensWhereUniqueInput | ImagensWhereUniqueInput[]
  }

  export type OpcoesProdutosUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<OpcoesProdutosCreateWithoutUserInput, OpcoesProdutosUncheckedCreateWithoutUserInput> | OpcoesProdutosCreateWithoutUserInput[] | OpcoesProdutosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OpcoesProdutosCreateOrConnectWithoutUserInput | OpcoesProdutosCreateOrConnectWithoutUserInput[]
    createMany?: OpcoesProdutosCreateManyUserInputEnvelope
    connect?: OpcoesProdutosWhereUniqueInput | OpcoesProdutosWhereUniqueInput[]
  }

  export type ProdutoCategoriaUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutUserInput, ProdutoCategoriaUncheckedCreateWithoutUserInput> | ProdutoCategoriaCreateWithoutUserInput[] | ProdutoCategoriaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutUserInput | ProdutoCategoriaCreateOrConnectWithoutUserInput[]
    createMany?: ProdutoCategoriaCreateManyUserInputEnvelope
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type CategoriaUpdateManyWithoutUserNestedInput = {
    create?: XOR<CategoriaCreateWithoutUserInput, CategoriaUncheckedCreateWithoutUserInput> | CategoriaCreateWithoutUserInput[] | CategoriaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoriaCreateOrConnectWithoutUserInput | CategoriaCreateOrConnectWithoutUserInput[]
    upsert?: CategoriaUpsertWithWhereUniqueWithoutUserInput | CategoriaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CategoriaCreateManyUserInputEnvelope
    set?: CategoriaWhereUniqueInput | CategoriaWhereUniqueInput[]
    disconnect?: CategoriaWhereUniqueInput | CategoriaWhereUniqueInput[]
    delete?: CategoriaWhereUniqueInput | CategoriaWhereUniqueInput[]
    connect?: CategoriaWhereUniqueInput | CategoriaWhereUniqueInput[]
    update?: CategoriaUpdateWithWhereUniqueWithoutUserInput | CategoriaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CategoriaUpdateManyWithWhereWithoutUserInput | CategoriaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CategoriaScalarWhereInput | CategoriaScalarWhereInput[]
  }

  export type ProdutosUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProdutosCreateWithoutUserInput, ProdutosUncheckedCreateWithoutUserInput> | ProdutosCreateWithoutUserInput[] | ProdutosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutosCreateOrConnectWithoutUserInput | ProdutosCreateOrConnectWithoutUserInput[]
    upsert?: ProdutosUpsertWithWhereUniqueWithoutUserInput | ProdutosUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProdutosCreateManyUserInputEnvelope
    set?: ProdutosWhereUniqueInput | ProdutosWhereUniqueInput[]
    disconnect?: ProdutosWhereUniqueInput | ProdutosWhereUniqueInput[]
    delete?: ProdutosWhereUniqueInput | ProdutosWhereUniqueInput[]
    connect?: ProdutosWhereUniqueInput | ProdutosWhereUniqueInput[]
    update?: ProdutosUpdateWithWhereUniqueWithoutUserInput | ProdutosUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProdutosUpdateManyWithWhereWithoutUserInput | ProdutosUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProdutosScalarWhereInput | ProdutosScalarWhereInput[]
  }

  export type ImagensUpdateManyWithoutUserNestedInput = {
    create?: XOR<ImagensCreateWithoutUserInput, ImagensUncheckedCreateWithoutUserInput> | ImagensCreateWithoutUserInput[] | ImagensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImagensCreateOrConnectWithoutUserInput | ImagensCreateOrConnectWithoutUserInput[]
    upsert?: ImagensUpsertWithWhereUniqueWithoutUserInput | ImagensUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ImagensCreateManyUserInputEnvelope
    set?: ImagensWhereUniqueInput | ImagensWhereUniqueInput[]
    disconnect?: ImagensWhereUniqueInput | ImagensWhereUniqueInput[]
    delete?: ImagensWhereUniqueInput | ImagensWhereUniqueInput[]
    connect?: ImagensWhereUniqueInput | ImagensWhereUniqueInput[]
    update?: ImagensUpdateWithWhereUniqueWithoutUserInput | ImagensUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ImagensUpdateManyWithWhereWithoutUserInput | ImagensUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ImagensScalarWhereInput | ImagensScalarWhereInput[]
  }

  export type OpcoesProdutosUpdateManyWithoutUserNestedInput = {
    create?: XOR<OpcoesProdutosCreateWithoutUserInput, OpcoesProdutosUncheckedCreateWithoutUserInput> | OpcoesProdutosCreateWithoutUserInput[] | OpcoesProdutosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OpcoesProdutosCreateOrConnectWithoutUserInput | OpcoesProdutosCreateOrConnectWithoutUserInput[]
    upsert?: OpcoesProdutosUpsertWithWhereUniqueWithoutUserInput | OpcoesProdutosUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OpcoesProdutosCreateManyUserInputEnvelope
    set?: OpcoesProdutosWhereUniqueInput | OpcoesProdutosWhereUniqueInput[]
    disconnect?: OpcoesProdutosWhereUniqueInput | OpcoesProdutosWhereUniqueInput[]
    delete?: OpcoesProdutosWhereUniqueInput | OpcoesProdutosWhereUniqueInput[]
    connect?: OpcoesProdutosWhereUniqueInput | OpcoesProdutosWhereUniqueInput[]
    update?: OpcoesProdutosUpdateWithWhereUniqueWithoutUserInput | OpcoesProdutosUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OpcoesProdutosUpdateManyWithWhereWithoutUserInput | OpcoesProdutosUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OpcoesProdutosScalarWhereInput | OpcoesProdutosScalarWhereInput[]
  }

  export type ProdutoCategoriaUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutUserInput, ProdutoCategoriaUncheckedCreateWithoutUserInput> | ProdutoCategoriaCreateWithoutUserInput[] | ProdutoCategoriaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutUserInput | ProdutoCategoriaCreateOrConnectWithoutUserInput[]
    upsert?: ProdutoCategoriaUpsertWithWhereUniqueWithoutUserInput | ProdutoCategoriaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProdutoCategoriaCreateManyUserInputEnvelope
    set?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    disconnect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    delete?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    update?: ProdutoCategoriaUpdateWithWhereUniqueWithoutUserInput | ProdutoCategoriaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProdutoCategoriaUpdateManyWithWhereWithoutUserInput | ProdutoCategoriaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProdutoCategoriaScalarWhereInput | ProdutoCategoriaScalarWhereInput[]
  }

  export type CategoriaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CategoriaCreateWithoutUserInput, CategoriaUncheckedCreateWithoutUserInput> | CategoriaCreateWithoutUserInput[] | CategoriaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CategoriaCreateOrConnectWithoutUserInput | CategoriaCreateOrConnectWithoutUserInput[]
    upsert?: CategoriaUpsertWithWhereUniqueWithoutUserInput | CategoriaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CategoriaCreateManyUserInputEnvelope
    set?: CategoriaWhereUniqueInput | CategoriaWhereUniqueInput[]
    disconnect?: CategoriaWhereUniqueInput | CategoriaWhereUniqueInput[]
    delete?: CategoriaWhereUniqueInput | CategoriaWhereUniqueInput[]
    connect?: CategoriaWhereUniqueInput | CategoriaWhereUniqueInput[]
    update?: CategoriaUpdateWithWhereUniqueWithoutUserInput | CategoriaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CategoriaUpdateManyWithWhereWithoutUserInput | CategoriaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CategoriaScalarWhereInput | CategoriaScalarWhereInput[]
  }

  export type ProdutosUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProdutosCreateWithoutUserInput, ProdutosUncheckedCreateWithoutUserInput> | ProdutosCreateWithoutUserInput[] | ProdutosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutosCreateOrConnectWithoutUserInput | ProdutosCreateOrConnectWithoutUserInput[]
    upsert?: ProdutosUpsertWithWhereUniqueWithoutUserInput | ProdutosUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProdutosCreateManyUserInputEnvelope
    set?: ProdutosWhereUniqueInput | ProdutosWhereUniqueInput[]
    disconnect?: ProdutosWhereUniqueInput | ProdutosWhereUniqueInput[]
    delete?: ProdutosWhereUniqueInput | ProdutosWhereUniqueInput[]
    connect?: ProdutosWhereUniqueInput | ProdutosWhereUniqueInput[]
    update?: ProdutosUpdateWithWhereUniqueWithoutUserInput | ProdutosUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProdutosUpdateManyWithWhereWithoutUserInput | ProdutosUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProdutosScalarWhereInput | ProdutosScalarWhereInput[]
  }

  export type ImagensUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ImagensCreateWithoutUserInput, ImagensUncheckedCreateWithoutUserInput> | ImagensCreateWithoutUserInput[] | ImagensUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ImagensCreateOrConnectWithoutUserInput | ImagensCreateOrConnectWithoutUserInput[]
    upsert?: ImagensUpsertWithWhereUniqueWithoutUserInput | ImagensUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ImagensCreateManyUserInputEnvelope
    set?: ImagensWhereUniqueInput | ImagensWhereUniqueInput[]
    disconnect?: ImagensWhereUniqueInput | ImagensWhereUniqueInput[]
    delete?: ImagensWhereUniqueInput | ImagensWhereUniqueInput[]
    connect?: ImagensWhereUniqueInput | ImagensWhereUniqueInput[]
    update?: ImagensUpdateWithWhereUniqueWithoutUserInput | ImagensUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ImagensUpdateManyWithWhereWithoutUserInput | ImagensUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ImagensScalarWhereInput | ImagensScalarWhereInput[]
  }

  export type OpcoesProdutosUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<OpcoesProdutosCreateWithoutUserInput, OpcoesProdutosUncheckedCreateWithoutUserInput> | OpcoesProdutosCreateWithoutUserInput[] | OpcoesProdutosUncheckedCreateWithoutUserInput[]
    connectOrCreate?: OpcoesProdutosCreateOrConnectWithoutUserInput | OpcoesProdutosCreateOrConnectWithoutUserInput[]
    upsert?: OpcoesProdutosUpsertWithWhereUniqueWithoutUserInput | OpcoesProdutosUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: OpcoesProdutosCreateManyUserInputEnvelope
    set?: OpcoesProdutosWhereUniqueInput | OpcoesProdutosWhereUniqueInput[]
    disconnect?: OpcoesProdutosWhereUniqueInput | OpcoesProdutosWhereUniqueInput[]
    delete?: OpcoesProdutosWhereUniqueInput | OpcoesProdutosWhereUniqueInput[]
    connect?: OpcoesProdutosWhereUniqueInput | OpcoesProdutosWhereUniqueInput[]
    update?: OpcoesProdutosUpdateWithWhereUniqueWithoutUserInput | OpcoesProdutosUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: OpcoesProdutosUpdateManyWithWhereWithoutUserInput | OpcoesProdutosUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: OpcoesProdutosScalarWhereInput | OpcoesProdutosScalarWhereInput[]
  }

  export type ProdutoCategoriaUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<ProdutoCategoriaCreateWithoutUserInput, ProdutoCategoriaUncheckedCreateWithoutUserInput> | ProdutoCategoriaCreateWithoutUserInput[] | ProdutoCategoriaUncheckedCreateWithoutUserInput[]
    connectOrCreate?: ProdutoCategoriaCreateOrConnectWithoutUserInput | ProdutoCategoriaCreateOrConnectWithoutUserInput[]
    upsert?: ProdutoCategoriaUpsertWithWhereUniqueWithoutUserInput | ProdutoCategoriaUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: ProdutoCategoriaCreateManyUserInputEnvelope
    set?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    disconnect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    delete?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    connect?: ProdutoCategoriaWhereUniqueInput | ProdutoCategoriaWhereUniqueInput[]
    update?: ProdutoCategoriaUpdateWithWhereUniqueWithoutUserInput | ProdutoCategoriaUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: ProdutoCategoriaUpdateManyWithWhereWithoutUserInput | ProdutoCategoriaUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: ProdutoCategoriaScalarWhereInput | ProdutoCategoriaScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutCategoriaInput = {
    create?: XOR<UserCreateWithoutCategoriaInput, UserUncheckedCreateWithoutCategoriaInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoriaInput
    connect?: UserWhereUniqueInput
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutCategoriaNestedInput = {
    create?: XOR<UserCreateWithoutCategoriaInput, UserUncheckedCreateWithoutCategoriaInput>
    connectOrCreate?: UserCreateOrConnectWithoutCategoriaInput
    upsert?: UserUpsertWithoutCategoriaInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCategoriaInput, UserUpdateWithoutCategoriaInput>, UserUncheckedUpdateWithoutCategoriaInput>
  }

  export type UserCreateNestedOneWithoutProdutosInput = {
    create?: XOR<UserCreateWithoutProdutosInput, UserUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: UserCreateOrConnectWithoutProdutosInput
    connect?: UserWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutProdutosNestedInput = {
    create?: XOR<UserCreateWithoutProdutosInput, UserUncheckedCreateWithoutProdutosInput>
    connectOrCreate?: UserCreateOrConnectWithoutProdutosInput
    upsert?: UserUpsertWithoutProdutosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProdutosInput, UserUpdateWithoutProdutosInput>, UserUncheckedUpdateWithoutProdutosInput>
  }

  export type UserCreateNestedOneWithoutImagensInput = {
    create?: XOR<UserCreateWithoutImagensInput, UserUncheckedCreateWithoutImagensInput>
    connectOrCreate?: UserCreateOrConnectWithoutImagensInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutImagensNestedInput = {
    create?: XOR<UserCreateWithoutImagensInput, UserUncheckedCreateWithoutImagensInput>
    connectOrCreate?: UserCreateOrConnectWithoutImagensInput
    upsert?: UserUpsertWithoutImagensInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutImagensInput, UserUpdateWithoutImagensInput>, UserUncheckedUpdateWithoutImagensInput>
  }

  export type UserCreateNestedOneWithoutOpcoesProdutosInput = {
    create?: XOR<UserCreateWithoutOpcoesProdutosInput, UserUncheckedCreateWithoutOpcoesProdutosInput>
    connectOrCreate?: UserCreateOrConnectWithoutOpcoesProdutosInput
    connect?: UserWhereUniqueInput
  }

  export type NullableEnumShapeFieldUpdateOperationsInput = {
    set?: $Enums.Shape | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type NullableEnumTypeFieldUpdateOperationsInput = {
    set?: $Enums.Type | null
  }

  export type UserUpdateOneRequiredWithoutOpcoesProdutosNestedInput = {
    create?: XOR<UserCreateWithoutOpcoesProdutosInput, UserUncheckedCreateWithoutOpcoesProdutosInput>
    connectOrCreate?: UserCreateOrConnectWithoutOpcoesProdutosInput
    upsert?: UserUpsertWithoutOpcoesProdutosInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutOpcoesProdutosInput, UserUpdateWithoutOpcoesProdutosInput>, UserUncheckedUpdateWithoutOpcoesProdutosInput>
  }

  export type UserCreateNestedOneWithoutProdutoCategoriaInput = {
    create?: XOR<UserCreateWithoutProdutoCategoriaInput, UserUncheckedCreateWithoutProdutoCategoriaInput>
    connectOrCreate?: UserCreateOrConnectWithoutProdutoCategoriaInput
    connect?: UserWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutProdutoCategoriaNestedInput = {
    create?: XOR<UserCreateWithoutProdutoCategoriaInput, UserUncheckedCreateWithoutProdutoCategoriaInput>
    connectOrCreate?: UserCreateOrConnectWithoutProdutoCategoriaInput
    upsert?: UserUpsertWithoutProdutoCategoriaInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutProdutoCategoriaInput, UserUpdateWithoutProdutoCategoriaInput>, UserUncheckedUpdateWithoutProdutoCategoriaInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedEnumShapeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Shape | EnumShapeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Shape[] | null
    notIn?: $Enums.Shape[] | null
    not?: NestedEnumShapeNullableFilter<$PrismaModel> | $Enums.Shape | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTypeNullableFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Type[] | null
    notIn?: $Enums.Type[] | null
    not?: NestedEnumTypeNullableFilter<$PrismaModel> | $Enums.Type | null
  }

  export type NestedEnumShapeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Shape | EnumShapeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Shape[] | null
    notIn?: $Enums.Shape[] | null
    not?: NestedEnumShapeNullableWithAggregatesFilter<$PrismaModel> | $Enums.Shape | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumShapeNullableFilter<$PrismaModel>
    _max?: NestedEnumShapeNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedEnumTypeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Type | EnumTypeFieldRefInput<$PrismaModel> | null
    in?: $Enums.Type[] | null
    notIn?: $Enums.Type[] | null
    not?: NestedEnumTypeNullableWithAggregatesFilter<$PrismaModel> | $Enums.Type | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedEnumTypeNullableFilter<$PrismaModel>
    _max?: NestedEnumTypeNullableFilter<$PrismaModel>
  }

  export type CategoriaCreateWithoutUserInput = {
    id?: string
    nome: string
    slug: string
    use_in_menu: boolean
  }

  export type CategoriaUncheckedCreateWithoutUserInput = {
    id?: string
    nome: string
    slug: string
    use_in_menu: boolean
  }

  export type CategoriaCreateOrConnectWithoutUserInput = {
    where: CategoriaWhereUniqueInput
    create: XOR<CategoriaCreateWithoutUserInput, CategoriaUncheckedCreateWithoutUserInput>
  }

  export type CategoriaCreateManyUserInputEnvelope = {
    data: CategoriaCreateManyUserInput | CategoriaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProdutosCreateWithoutUserInput = {
    id?: string
    enabled: boolean
    name: string
    slug: string
    use_in_menu: boolean
    stock: number
    description: string
    price: number
    price_with_discount: number
  }

  export type ProdutosUncheckedCreateWithoutUserInput = {
    id?: string
    enabled: boolean
    name: string
    slug: string
    use_in_menu: boolean
    stock: number
    description: string
    price: number
    price_with_discount: number
  }

  export type ProdutosCreateOrConnectWithoutUserInput = {
    where: ProdutosWhereUniqueInput
    create: XOR<ProdutosCreateWithoutUserInput, ProdutosUncheckedCreateWithoutUserInput>
  }

  export type ProdutosCreateManyUserInputEnvelope = {
    data: ProdutosCreateManyUserInput | ProdutosCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ImagensCreateWithoutUserInput = {
    id?: string
    product_id: number
    enabled: boolean
    path: string
  }

  export type ImagensUncheckedCreateWithoutUserInput = {
    id?: string
    product_id: number
    enabled: boolean
    path: string
  }

  export type ImagensCreateOrConnectWithoutUserInput = {
    where: ImagensWhereUniqueInput
    create: XOR<ImagensCreateWithoutUserInput, ImagensUncheckedCreateWithoutUserInput>
  }

  export type ImagensCreateManyUserInputEnvelope = {
    data: ImagensCreateManyUserInput | ImagensCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type OpcoesProdutosCreateWithoutUserInput = {
    product_id: number
    title: string
    shape?: $Enums.Shape | null
    radius?: number | null
    type?: $Enums.Type | null
    values: string
  }

  export type OpcoesProdutosUncheckedCreateWithoutUserInput = {
    id?: number
    product_id: number
    title: string
    shape?: $Enums.Shape | null
    radius?: number | null
    type?: $Enums.Type | null
    values: string
  }

  export type OpcoesProdutosCreateOrConnectWithoutUserInput = {
    where: OpcoesProdutosWhereUniqueInput
    create: XOR<OpcoesProdutosCreateWithoutUserInput, OpcoesProdutosUncheckedCreateWithoutUserInput>
  }

  export type OpcoesProdutosCreateManyUserInputEnvelope = {
    data: OpcoesProdutosCreateManyUserInput | OpcoesProdutosCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type ProdutoCategoriaCreateWithoutUserInput = {
    categoria_id: number
    produto_id: number
  }

  export type ProdutoCategoriaUncheckedCreateWithoutUserInput = {
    id?: number
    categoria_id: number
    produto_id: number
  }

  export type ProdutoCategoriaCreateOrConnectWithoutUserInput = {
    where: ProdutoCategoriaWhereUniqueInput
    create: XOR<ProdutoCategoriaCreateWithoutUserInput, ProdutoCategoriaUncheckedCreateWithoutUserInput>
  }

  export type ProdutoCategoriaCreateManyUserInputEnvelope = {
    data: ProdutoCategoriaCreateManyUserInput | ProdutoCategoriaCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CategoriaUpsertWithWhereUniqueWithoutUserInput = {
    where: CategoriaWhereUniqueInput
    update: XOR<CategoriaUpdateWithoutUserInput, CategoriaUncheckedUpdateWithoutUserInput>
    create: XOR<CategoriaCreateWithoutUserInput, CategoriaUncheckedCreateWithoutUserInput>
  }

  export type CategoriaUpdateWithWhereUniqueWithoutUserInput = {
    where: CategoriaWhereUniqueInput
    data: XOR<CategoriaUpdateWithoutUserInput, CategoriaUncheckedUpdateWithoutUserInput>
  }

  export type CategoriaUpdateManyWithWhereWithoutUserInput = {
    where: CategoriaScalarWhereInput
    data: XOR<CategoriaUpdateManyMutationInput, CategoriaUncheckedUpdateManyWithoutUserInput>
  }

  export type CategoriaScalarWhereInput = {
    AND?: CategoriaScalarWhereInput | CategoriaScalarWhereInput[]
    OR?: CategoriaScalarWhereInput[]
    NOT?: CategoriaScalarWhereInput | CategoriaScalarWhereInput[]
    id?: StringFilter<"Categoria"> | string
    nome?: StringFilter<"Categoria"> | string
    slug?: StringFilter<"Categoria"> | string
    use_in_menu?: BoolFilter<"Categoria"> | boolean
    userId?: StringFilter<"Categoria"> | string
  }

  export type ProdutosUpsertWithWhereUniqueWithoutUserInput = {
    where: ProdutosWhereUniqueInput
    update: XOR<ProdutosUpdateWithoutUserInput, ProdutosUncheckedUpdateWithoutUserInput>
    create: XOR<ProdutosCreateWithoutUserInput, ProdutosUncheckedCreateWithoutUserInput>
  }

  export type ProdutosUpdateWithWhereUniqueWithoutUserInput = {
    where: ProdutosWhereUniqueInput
    data: XOR<ProdutosUpdateWithoutUserInput, ProdutosUncheckedUpdateWithoutUserInput>
  }

  export type ProdutosUpdateManyWithWhereWithoutUserInput = {
    where: ProdutosScalarWhereInput
    data: XOR<ProdutosUpdateManyMutationInput, ProdutosUncheckedUpdateManyWithoutUserInput>
  }

  export type ProdutosScalarWhereInput = {
    AND?: ProdutosScalarWhereInput | ProdutosScalarWhereInput[]
    OR?: ProdutosScalarWhereInput[]
    NOT?: ProdutosScalarWhereInput | ProdutosScalarWhereInput[]
    id?: StringFilter<"Produtos"> | string
    enabled?: BoolFilter<"Produtos"> | boolean
    name?: StringFilter<"Produtos"> | string
    slug?: StringFilter<"Produtos"> | string
    use_in_menu?: BoolFilter<"Produtos"> | boolean
    stock?: IntFilter<"Produtos"> | number
    description?: StringFilter<"Produtos"> | string
    price?: FloatFilter<"Produtos"> | number
    price_with_discount?: FloatFilter<"Produtos"> | number
    userId?: StringFilter<"Produtos"> | string
  }

  export type ImagensUpsertWithWhereUniqueWithoutUserInput = {
    where: ImagensWhereUniqueInput
    update: XOR<ImagensUpdateWithoutUserInput, ImagensUncheckedUpdateWithoutUserInput>
    create: XOR<ImagensCreateWithoutUserInput, ImagensUncheckedCreateWithoutUserInput>
  }

  export type ImagensUpdateWithWhereUniqueWithoutUserInput = {
    where: ImagensWhereUniqueInput
    data: XOR<ImagensUpdateWithoutUserInput, ImagensUncheckedUpdateWithoutUserInput>
  }

  export type ImagensUpdateManyWithWhereWithoutUserInput = {
    where: ImagensScalarWhereInput
    data: XOR<ImagensUpdateManyMutationInput, ImagensUncheckedUpdateManyWithoutUserInput>
  }

  export type ImagensScalarWhereInput = {
    AND?: ImagensScalarWhereInput | ImagensScalarWhereInput[]
    OR?: ImagensScalarWhereInput[]
    NOT?: ImagensScalarWhereInput | ImagensScalarWhereInput[]
    id?: StringFilter<"Imagens"> | string
    product_id?: IntFilter<"Imagens"> | number
    enabled?: BoolFilter<"Imagens"> | boolean
    path?: StringFilter<"Imagens"> | string
    userId?: StringFilter<"Imagens"> | string
  }

  export type OpcoesProdutosUpsertWithWhereUniqueWithoutUserInput = {
    where: OpcoesProdutosWhereUniqueInput
    update: XOR<OpcoesProdutosUpdateWithoutUserInput, OpcoesProdutosUncheckedUpdateWithoutUserInput>
    create: XOR<OpcoesProdutosCreateWithoutUserInput, OpcoesProdutosUncheckedCreateWithoutUserInput>
  }

  export type OpcoesProdutosUpdateWithWhereUniqueWithoutUserInput = {
    where: OpcoesProdutosWhereUniqueInput
    data: XOR<OpcoesProdutosUpdateWithoutUserInput, OpcoesProdutosUncheckedUpdateWithoutUserInput>
  }

  export type OpcoesProdutosUpdateManyWithWhereWithoutUserInput = {
    where: OpcoesProdutosScalarWhereInput
    data: XOR<OpcoesProdutosUpdateManyMutationInput, OpcoesProdutosUncheckedUpdateManyWithoutUserInput>
  }

  export type OpcoesProdutosScalarWhereInput = {
    AND?: OpcoesProdutosScalarWhereInput | OpcoesProdutosScalarWhereInput[]
    OR?: OpcoesProdutosScalarWhereInput[]
    NOT?: OpcoesProdutosScalarWhereInput | OpcoesProdutosScalarWhereInput[]
    id?: IntFilter<"OpcoesProdutos"> | number
    product_id?: IntFilter<"OpcoesProdutos"> | number
    title?: StringFilter<"OpcoesProdutos"> | string
    shape?: EnumShapeNullableFilter<"OpcoesProdutos"> | $Enums.Shape | null
    radius?: IntNullableFilter<"OpcoesProdutos"> | number | null
    type?: EnumTypeNullableFilter<"OpcoesProdutos"> | $Enums.Type | null
    values?: StringFilter<"OpcoesProdutos"> | string
    userId?: StringFilter<"OpcoesProdutos"> | string
  }

  export type ProdutoCategoriaUpsertWithWhereUniqueWithoutUserInput = {
    where: ProdutoCategoriaWhereUniqueInput
    update: XOR<ProdutoCategoriaUpdateWithoutUserInput, ProdutoCategoriaUncheckedUpdateWithoutUserInput>
    create: XOR<ProdutoCategoriaCreateWithoutUserInput, ProdutoCategoriaUncheckedCreateWithoutUserInput>
  }

  export type ProdutoCategoriaUpdateWithWhereUniqueWithoutUserInput = {
    where: ProdutoCategoriaWhereUniqueInput
    data: XOR<ProdutoCategoriaUpdateWithoutUserInput, ProdutoCategoriaUncheckedUpdateWithoutUserInput>
  }

  export type ProdutoCategoriaUpdateManyWithWhereWithoutUserInput = {
    where: ProdutoCategoriaScalarWhereInput
    data: XOR<ProdutoCategoriaUpdateManyMutationInput, ProdutoCategoriaUncheckedUpdateManyWithoutUserInput>
  }

  export type ProdutoCategoriaScalarWhereInput = {
    AND?: ProdutoCategoriaScalarWhereInput | ProdutoCategoriaScalarWhereInput[]
    OR?: ProdutoCategoriaScalarWhereInput[]
    NOT?: ProdutoCategoriaScalarWhereInput | ProdutoCategoriaScalarWhereInput[]
    id?: IntFilter<"ProdutoCategoria"> | number
    categoria_id?: IntFilter<"ProdutoCategoria"> | number
    produto_id?: IntFilter<"ProdutoCategoria"> | number
    userId?: StringFilter<"ProdutoCategoria"> | string
  }

  export type UserCreateWithoutCategoriaInput = {
    id?: string
    username: string
    email: string
    password: string
    produtos?: ProdutosCreateNestedManyWithoutUserInput
    imagens?: ImagensCreateNestedManyWithoutUserInput
    opcoesProdutos?: OpcoesProdutosCreateNestedManyWithoutUserInput
    produtoCategoria?: ProdutoCategoriaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCategoriaInput = {
    id?: string
    username: string
    email: string
    password: string
    produtos?: ProdutosUncheckedCreateNestedManyWithoutUserInput
    imagens?: ImagensUncheckedCreateNestedManyWithoutUserInput
    opcoesProdutos?: OpcoesProdutosUncheckedCreateNestedManyWithoutUserInput
    produtoCategoria?: ProdutoCategoriaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCategoriaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCategoriaInput, UserUncheckedCreateWithoutCategoriaInput>
  }

  export type UserUpsertWithoutCategoriaInput = {
    update: XOR<UserUpdateWithoutCategoriaInput, UserUncheckedUpdateWithoutCategoriaInput>
    create: XOR<UserCreateWithoutCategoriaInput, UserUncheckedCreateWithoutCategoriaInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCategoriaInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCategoriaInput, UserUncheckedUpdateWithoutCategoriaInput>
  }

  export type UserUpdateWithoutCategoriaInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutosUpdateManyWithoutUserNestedInput
    imagens?: ImagensUpdateManyWithoutUserNestedInput
    opcoesProdutos?: OpcoesProdutosUpdateManyWithoutUserNestedInput
    produtoCategoria?: ProdutoCategoriaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCategoriaInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    produtos?: ProdutosUncheckedUpdateManyWithoutUserNestedInput
    imagens?: ImagensUncheckedUpdateManyWithoutUserNestedInput
    opcoesProdutos?: OpcoesProdutosUncheckedUpdateManyWithoutUserNestedInput
    produtoCategoria?: ProdutoCategoriaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutProdutosInput = {
    id?: string
    username: string
    email: string
    password: string
    categoria?: CategoriaCreateNestedManyWithoutUserInput
    imagens?: ImagensCreateNestedManyWithoutUserInput
    opcoesProdutos?: OpcoesProdutosCreateNestedManyWithoutUserInput
    produtoCategoria?: ProdutoCategoriaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProdutosInput = {
    id?: string
    username: string
    email: string
    password: string
    categoria?: CategoriaUncheckedCreateNestedManyWithoutUserInput
    imagens?: ImagensUncheckedCreateNestedManyWithoutUserInput
    opcoesProdutos?: OpcoesProdutosUncheckedCreateNestedManyWithoutUserInput
    produtoCategoria?: ProdutoCategoriaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProdutosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProdutosInput, UserUncheckedCreateWithoutProdutosInput>
  }

  export type UserUpsertWithoutProdutosInput = {
    update: XOR<UserUpdateWithoutProdutosInput, UserUncheckedUpdateWithoutProdutosInput>
    create: XOR<UserCreateWithoutProdutosInput, UserUncheckedCreateWithoutProdutosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProdutosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProdutosInput, UserUncheckedUpdateWithoutProdutosInput>
  }

  export type UserUpdateWithoutProdutosInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUpdateManyWithoutUserNestedInput
    imagens?: ImagensUpdateManyWithoutUserNestedInput
    opcoesProdutos?: OpcoesProdutosUpdateManyWithoutUserNestedInput
    produtoCategoria?: ProdutoCategoriaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProdutosInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUncheckedUpdateManyWithoutUserNestedInput
    imagens?: ImagensUncheckedUpdateManyWithoutUserNestedInput
    opcoesProdutos?: OpcoesProdutosUncheckedUpdateManyWithoutUserNestedInput
    produtoCategoria?: ProdutoCategoriaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutImagensInput = {
    id?: string
    username: string
    email: string
    password: string
    categoria?: CategoriaCreateNestedManyWithoutUserInput
    produtos?: ProdutosCreateNestedManyWithoutUserInput
    opcoesProdutos?: OpcoesProdutosCreateNestedManyWithoutUserInput
    produtoCategoria?: ProdutoCategoriaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutImagensInput = {
    id?: string
    username: string
    email: string
    password: string
    categoria?: CategoriaUncheckedCreateNestedManyWithoutUserInput
    produtos?: ProdutosUncheckedCreateNestedManyWithoutUserInput
    opcoesProdutos?: OpcoesProdutosUncheckedCreateNestedManyWithoutUserInput
    produtoCategoria?: ProdutoCategoriaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutImagensInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutImagensInput, UserUncheckedCreateWithoutImagensInput>
  }

  export type UserUpsertWithoutImagensInput = {
    update: XOR<UserUpdateWithoutImagensInput, UserUncheckedUpdateWithoutImagensInput>
    create: XOR<UserCreateWithoutImagensInput, UserUncheckedCreateWithoutImagensInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutImagensInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutImagensInput, UserUncheckedUpdateWithoutImagensInput>
  }

  export type UserUpdateWithoutImagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUpdateManyWithoutUserNestedInput
    produtos?: ProdutosUpdateManyWithoutUserNestedInput
    opcoesProdutos?: OpcoesProdutosUpdateManyWithoutUserNestedInput
    produtoCategoria?: ProdutoCategoriaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutImagensInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUncheckedUpdateManyWithoutUserNestedInput
    produtos?: ProdutosUncheckedUpdateManyWithoutUserNestedInput
    opcoesProdutos?: OpcoesProdutosUncheckedUpdateManyWithoutUserNestedInput
    produtoCategoria?: ProdutoCategoriaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutOpcoesProdutosInput = {
    id?: string
    username: string
    email: string
    password: string
    categoria?: CategoriaCreateNestedManyWithoutUserInput
    produtos?: ProdutosCreateNestedManyWithoutUserInput
    imagens?: ImagensCreateNestedManyWithoutUserInput
    produtoCategoria?: ProdutoCategoriaCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutOpcoesProdutosInput = {
    id?: string
    username: string
    email: string
    password: string
    categoria?: CategoriaUncheckedCreateNestedManyWithoutUserInput
    produtos?: ProdutosUncheckedCreateNestedManyWithoutUserInput
    imagens?: ImagensUncheckedCreateNestedManyWithoutUserInput
    produtoCategoria?: ProdutoCategoriaUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutOpcoesProdutosInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutOpcoesProdutosInput, UserUncheckedCreateWithoutOpcoesProdutosInput>
  }

  export type UserUpsertWithoutOpcoesProdutosInput = {
    update: XOR<UserUpdateWithoutOpcoesProdutosInput, UserUncheckedUpdateWithoutOpcoesProdutosInput>
    create: XOR<UserCreateWithoutOpcoesProdutosInput, UserUncheckedCreateWithoutOpcoesProdutosInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutOpcoesProdutosInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutOpcoesProdutosInput, UserUncheckedUpdateWithoutOpcoesProdutosInput>
  }

  export type UserUpdateWithoutOpcoesProdutosInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUpdateManyWithoutUserNestedInput
    produtos?: ProdutosUpdateManyWithoutUserNestedInput
    imagens?: ImagensUpdateManyWithoutUserNestedInput
    produtoCategoria?: ProdutoCategoriaUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutOpcoesProdutosInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUncheckedUpdateManyWithoutUserNestedInput
    produtos?: ProdutosUncheckedUpdateManyWithoutUserNestedInput
    imagens?: ImagensUncheckedUpdateManyWithoutUserNestedInput
    produtoCategoria?: ProdutoCategoriaUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutProdutoCategoriaInput = {
    id?: string
    username: string
    email: string
    password: string
    categoria?: CategoriaCreateNestedManyWithoutUserInput
    produtos?: ProdutosCreateNestedManyWithoutUserInput
    imagens?: ImagensCreateNestedManyWithoutUserInput
    opcoesProdutos?: OpcoesProdutosCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutProdutoCategoriaInput = {
    id?: string
    username: string
    email: string
    password: string
    categoria?: CategoriaUncheckedCreateNestedManyWithoutUserInput
    produtos?: ProdutosUncheckedCreateNestedManyWithoutUserInput
    imagens?: ImagensUncheckedCreateNestedManyWithoutUserInput
    opcoesProdutos?: OpcoesProdutosUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutProdutoCategoriaInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutProdutoCategoriaInput, UserUncheckedCreateWithoutProdutoCategoriaInput>
  }

  export type UserUpsertWithoutProdutoCategoriaInput = {
    update: XOR<UserUpdateWithoutProdutoCategoriaInput, UserUncheckedUpdateWithoutProdutoCategoriaInput>
    create: XOR<UserCreateWithoutProdutoCategoriaInput, UserUncheckedCreateWithoutProdutoCategoriaInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutProdutoCategoriaInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutProdutoCategoriaInput, UserUncheckedUpdateWithoutProdutoCategoriaInput>
  }

  export type UserUpdateWithoutProdutoCategoriaInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUpdateManyWithoutUserNestedInput
    produtos?: ProdutosUpdateManyWithoutUserNestedInput
    imagens?: ImagensUpdateManyWithoutUserNestedInput
    opcoesProdutos?: OpcoesProdutosUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutProdutoCategoriaInput = {
    id?: StringFieldUpdateOperationsInput | string
    username?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    categoria?: CategoriaUncheckedUpdateManyWithoutUserNestedInput
    produtos?: ProdutosUncheckedUpdateManyWithoutUserNestedInput
    imagens?: ImagensUncheckedUpdateManyWithoutUserNestedInput
    opcoesProdutos?: OpcoesProdutosUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CategoriaCreateManyUserInput = {
    id?: string
    nome: string
    slug: string
    use_in_menu: boolean
  }

  export type ProdutosCreateManyUserInput = {
    id?: string
    enabled: boolean
    name: string
    slug: string
    use_in_menu: boolean
    stock: number
    description: string
    price: number
    price_with_discount: number
  }

  export type ImagensCreateManyUserInput = {
    id?: string
    product_id: number
    enabled: boolean
    path: string
  }

  export type OpcoesProdutosCreateManyUserInput = {
    id?: number
    product_id: number
    title: string
    shape?: $Enums.Shape | null
    radius?: number | null
    type?: $Enums.Type | null
    values: string
  }

  export type ProdutoCategoriaCreateManyUserInput = {
    id?: number
    categoria_id: number
    produto_id: number
  }

  export type CategoriaUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoriaUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CategoriaUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    nome?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
  }

  export type ProdutosUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
    stock?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    price_with_discount?: FloatFieldUpdateOperationsInput | number
  }

  export type ProdutosUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
    stock?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    price_with_discount?: FloatFieldUpdateOperationsInput | number
  }

  export type ProdutosUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    enabled?: BoolFieldUpdateOperationsInput | boolean
    name?: StringFieldUpdateOperationsInput | string
    slug?: StringFieldUpdateOperationsInput | string
    use_in_menu?: BoolFieldUpdateOperationsInput | boolean
    stock?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    price?: FloatFieldUpdateOperationsInput | number
    price_with_discount?: FloatFieldUpdateOperationsInput | number
  }

  export type ImagensUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ImagensUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    path?: StringFieldUpdateOperationsInput | string
  }

  export type ImagensUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    product_id?: IntFieldUpdateOperationsInput | number
    enabled?: BoolFieldUpdateOperationsInput | boolean
    path?: StringFieldUpdateOperationsInput | string
  }

  export type OpcoesProdutosUpdateWithoutUserInput = {
    product_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    shape?: NullableEnumShapeFieldUpdateOperationsInput | $Enums.Shape | null
    radius?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
    values?: StringFieldUpdateOperationsInput | string
  }

  export type OpcoesProdutosUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    shape?: NullableEnumShapeFieldUpdateOperationsInput | $Enums.Shape | null
    radius?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
    values?: StringFieldUpdateOperationsInput | string
  }

  export type OpcoesProdutosUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    product_id?: IntFieldUpdateOperationsInput | number
    title?: StringFieldUpdateOperationsInput | string
    shape?: NullableEnumShapeFieldUpdateOperationsInput | $Enums.Shape | null
    radius?: NullableIntFieldUpdateOperationsInput | number | null
    type?: NullableEnumTypeFieldUpdateOperationsInput | $Enums.Type | null
    values?: StringFieldUpdateOperationsInput | string
  }

  export type ProdutoCategoriaUpdateWithoutUserInput = {
    categoria_id?: IntFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCategoriaUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
  }

  export type ProdutoCategoriaUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    categoria_id?: IntFieldUpdateOperationsInput | number
    produto_id?: IntFieldUpdateOperationsInput | number
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoriaDefaultArgs instead
     */
    export type CategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoriaDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutosDefaultArgs instead
     */
    export type ProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImagensDefaultArgs instead
     */
    export type ImagensArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImagensDefaultArgs<ExtArgs>
    /**
     * @deprecated Use OpcoesProdutosDefaultArgs instead
     */
    export type OpcoesProdutosArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = OpcoesProdutosDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ProdutoCategoriaDefaultArgs instead
     */
    export type ProdutoCategoriaArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ProdutoCategoriaDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}